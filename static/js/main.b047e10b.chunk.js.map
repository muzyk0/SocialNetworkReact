{"version":3,"sources":["Components/common/Preloader/Preloader.module.css","Components/Profile/Profile.module.css","Components/Profile/Posts/Post/Post.module.css","Components/Dialogs/Dialogs.module.css","Components/Sidebar/Sidebar.module.css","redux/profile-reducer.ts","reportWebVitals.ts","API/api.ts","redux/users-reducer.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/auth-reducer.ts","redux/store.ts","Components/Dialogs/DialogItem/DialogsItem.tsx","Components/Dialogs/Messages/Message.tsx","Components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Sidebar/Sidebar.tsx","Components/Sidebar/SidebarContainer.tsx","assets/images/userPhoto.png","Components/Users/Users.tsx","Components/common/Preloader/Preloader.tsx","Components/Users/UsersContainer.tsx","Components/common/EditableSpan/EditableSpan.tsx","Components/Profile/ProfileData/ProfileData.tsx","Components/Profile/Posts/Post/Post.tsx","Components/Profile/Posts/MyPostsContainer.tsx","Components/Profile/Posts/MyPosts.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","Components/Header/logo.svg","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/LoginPage.tsx","App.tsx","index.tsx","Components/Profile/ProfileData/ProfileData.module.css","Components/Profile/Posts/MyPosts.module.css","Components/Users/UsersContainer.module.css","Components/Header/Header.module.css"],"names":["module","exports","PROFILE_ACTION_TYPE","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","get","response","data","id","post","delete","profileAPI","userId","status","put","authAPI","email","password","rememberMe","USERS_ACTIONS","initialState","newPostText","posts","message","likesCount","profile","setStatus","type","SET_STATUS","SEND_MESSAGE","UPDATE_NEW_MESSAGE_BODY","newMessageBody","dialogs","name","messages","friends","users","totalCount","isFetching","followingInProgress","toggleIsFetching","TOGGLE_IS_FETCHING","toggleFollowingProgress","isFollow","TOGGLE_IS_FOLLOWING_IN_PROGRESS","login","isAuth","setAuthUserData","SET_USER_DATA","payload","getAuthUserData","dispatch","a","resultCode","Error","rootReducer","combineReducers","profilePage","state","action","ADD_POST","newPost","Date","getTime","trimmedText","UPDATE_NEW_POST_TEXT","newText","SET_USER_PROFILE","dialogsPage","newMessage","trim","body","sidebar","usersPage","FOLLOW","map","u","userID","followed","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","filter","auth","form","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","DialogItem","props","path","className","s","dialog","to","activeClassName","active","Message","Dialogs","dialogsElements","messagesElements","dialogsItems","placeholder","value","onChange","e","messageText","currentTarget","updateNewMessageBody","onClick","onSendMessage","mapStateToPropsForRedirect","withAuthRedirect","Component","connect","restProps","compose","SidebarFriendsBlock","friendItem","friend","friendBlock","Friend","imgProfilePhoto","Sidebar","SidebarContainer","Users","UsersEl","src","photos","small","userPhoto","styles","alt","disabled","some","unfollow","follow","pages","i","push","page","selectedPage","onPageChanged","Preloader","ldsHourglass","UsersContainerAPI","getUsers","setCurrentPage","onFollow","onUnFollow","this","React","connector","items","EditableSpan","editMode","title","activateEditMode","setState","DeactivateEditMode","prevProps","prevState","snapshot","onDoubleClick","onBlur","autoFocus","ProfileData","profileData","defaultUserPhoto","fullName","updateStatus","aboutMe","contacts","lookingForAJob","lookingForAJobDescription","ProfileContacts","netWork","Object","keys","netWorkLinks","values","key","wrapperContacts","Post","item","MyPostsContainer","addPost","updateNewPostText","text","postText","postsElements","postsBlock","new_post","Profile","ProfileContainer","match","params","getUserProfile","getStatus","withRouter","Header","header","logo","loginBlock","HeaderContainer","LoginReduxForm","reduxForm","onSubmit","handleSubmit","Field","component","loginTC","formData","App","render","DialogsContainer","UsersContainer","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b047e10b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__3XCPk\",\"ldsHourglass\":\"Preloader_ldsHourglass__pzUo-\",\"lds-hourglass\":\"Preloader_lds-hourglass__1hkv0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__CiwxZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2q3Eb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__BRHD6\",\"dialogsItems\":\"Dialogs_dialogsItems__1aH1f\",\"dialog\":\"Dialogs_dialog__1glHE\",\"active\":\"Dialogs_active__3NWs5\",\"messanges\":\"Dialogs_messanges__WVkjx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__13B6p\",\"active\":\"Sidebar_active__2WsD6\",\"friendBlock\":\"Sidebar_friendBlock__2oXRU\",\"friend\":\"Sidebar_friend__3Y_SH\",\"name\":\"Sidebar_name__2Hl5y\",\"imgProfilePhoto\":\"Sidebar_imgProfilePhoto__1UA-e\"};","import {profileAPI} from '../API/api';\r\nimport {AppThunkType} from './store';\r\n\r\nexport enum PROFILE_ACTION_TYPE {\r\n    ADD_POST = 'APP/PROFILE/ADD-POST',\r\n    UPDATE_NEW_POST_TEXT = 'APP/PROFILE/UPDATE-NEW-POST-TEXT',\r\n    SET_USER_PROFILE = 'APP/PROFILE/SET_PROFILE_INFO-NEW-POST-TEXT',\r\n    SET_STATUS = 'APP/PROFILE/SET_STATUS',\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfileType = {\r\n    'aboutMe': string | null\r\n    'contacts': {\r\n        'facebook': string | null\r\n        'website': string | null\r\n        'vk': string | null\r\n        'twitter': string | null\r\n        'instagram': string | null\r\n        'youtube': string | null\r\n        'github': string | null\r\n        'mainLink': string | null\r\n    },\r\n    'lookingForAJob': string | null\r\n    'lookingForAJobDescription': string | null\r\n    'fullName': string | null\r\n    'userId': number\r\n    'photos': {\r\n        'small': string | null\r\n        'large': string | null\r\n    }\r\n}\r\nlet initialState = {\r\n    newPostText: '',\r\n    posts: [\r\n        {\r\n            id: 1,\r\n            message: 'Good this site',\r\n            likesCount: 10\r\n        },\r\n        {\r\n            id: 2,\r\n            message: 'Good this site',\r\n            likesCount: 10\r\n        }\r\n    ] as PostType[],\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n}\r\n\r\nexport type ProfileReducerInitialStateType = typeof initialState\r\n\r\n\r\nexport const profileReducer = (state: ProfileReducerInitialStateType = initialState, action: profileActionsType): ProfileReducerInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case PROFILE_ACTION_TYPE.ADD_POST:\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            }\r\n            const trimmedText = newPost.message\r\n            if (trimmedText) {\r\n                return {\r\n                    ...state,\r\n                    posts: [...state.posts, newPost],\r\n                    newPostText: ''\r\n                }\r\n            }\r\n\r\n            return state\r\n        case PROFILE_ACTION_TYPE.UPDATE_NEW_POST_TEXT:\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n        case PROFILE_ACTION_TYPE.SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case PROFILE_ACTION_TYPE.SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport type profileActionsType = ReturnType<typeof addPostActionCreator>\r\n    | ReturnType<typeof updateNewPostTextAC>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n\r\n// Action Creators\r\nexport const addPostActionCreator = () => {\r\n    return {type: PROFILE_ACTION_TYPE.ADD_POST} as const\r\n}\r\nexport const updateNewPostTextAC = (postText: string) => {\r\n    return {type: PROFILE_ACTION_TYPE.UPDATE_NEW_POST_TEXT, newText: postText} as const\r\n}\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {type: PROFILE_ACTION_TYPE.SET_USER_PROFILE, profile} as const\r\n}\r\nexport const setStatus = (status: string) => {\r\n    return {type: PROFILE_ACTION_TYPE.SET_STATUS, status} as const\r\n}\r\n\r\n// Thunk Creator\r\nexport const getUserProfile = (userId: string): AppThunkType => async dispatch => {\r\n    try {\r\n        const response = await profileAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response.data))\r\n    } catch (e) {\r\n        throw new Error()\r\n    }\r\n}\r\nexport const getStatus = (userId: string): AppThunkType => async dispatch => {\r\n    try {\r\n        const response = await profileAPI.getStatus(userId)\r\n        dispatch(setStatus(response.data))\r\n    } catch (e) {\r\n        throw new Error()\r\n    }\r\n}\r\nexport const updateStatus = (status: string): AppThunkType => async dispatch => {\r\n    try {\r\n        const response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    } catch (e) {\r\n        throw new Error()\r\n    }\r\n}\r\n\r\n\r\n// const handlers = {\r\n//     [LOADING]: (state) => {\r\n//         return {...state, isLoading: true}\r\n//     },\r\n//     DEFAULT: (state) => state,\r\n// }\r\n//\r\n// export const userReducer = (state, action) => {\r\n//     const handler = handlers[action.type] || handlers.DEFAULT\r\n//     return handler(state, action)\r\n// }","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\r\nimport {ProfileType} from '../redux/profile-reducer';\r\n\r\nexport type ResponseItemType = {\r\n    'name': string\r\n    'id': number\r\n    'uniqueUrlName': null | string\r\n    'photos': {\r\n        'small': null | string\r\n        'large': null | string\r\n    },\r\n    'status': null | string\r\n    'followed': boolean\r\n}\r\nexport type ServerData = {\r\n    'items': ResponseItemType[]\r\n    'totalCount': number\r\n    'error': null | string\r\n}\r\ntype ResponseType = {\r\n    data: ServerData\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '458be47a-15a2-43bc-bb9e-a21974e6a059'\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers: (currentPage: number = 1, pageSize: number = 10) => {\r\n        return instance.get<ServerData>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then((response: ResponseType) => response.data)\r\n    },\r\n    follow: (id: number = 2) => {\r\n        return instance.post(`follow/${id}`)\r\n            .then((response) => response.data)\r\n    },\r\n    unfollow: (id: number = 2) => {\r\n        return instance.delete(`follow/${id}`)\r\n            .then((response) => response.data)\r\n    },\r\n}\r\n\r\n\r\n\r\n\r\nexport const profileAPI = {\r\n    getProfile: (userId: string) => {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n    },\r\n    getStatus: (userId: string) => {\r\n        return instance.get<string>(`/profile/status/${userId}`)\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return instance.put(`/profile/status/`, {\r\n            status: status\r\n        })\r\n    }\r\n}\r\n\r\n\r\ntype AuthResponseType = {\r\n    data: {\r\n        id: number\r\n        login: string\r\n        email: string\r\n    }\r\n    'messages': [],\r\n    'fieldsErrors': [],\r\n    'resultCode': 0\r\n}\r\n\r\nexport const authAPI =  {\r\n    me: () => {\r\n        return instance.get<AuthResponseType>(`auth/me`)\r\n    },\r\n    login: (email: string,password: string,rememberMe: boolean,) => {\r\n        return instance.post(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n        })\r\n    },\r\n}\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {usersAPI} from '../API/api';\r\n\r\nexport enum USERS_ACTIONS {\r\n    FOLLOW = 'FOLLOW',\r\n    UNFOLLOW = 'UNFOLLOW',\r\n    SET_USERS = 'SET_USERS',\r\n    SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',\r\n    SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT',\r\n    TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING',\r\n    TOGGLE_IS_FOLLOWING_IN_PROGRESS = 'TOGGLE_IS_FOLLOWING_IN_PROGRESS',\r\n}\r\n\r\n\r\nexport type UsersInitialStatePropsType = {\r\n    'name': string\r\n    'id': number\r\n    'uniqueUrlName': string | null\r\n    'photos': {\r\n        'small': string | null\r\n        'large': string | null\r\n    },\r\n    'status': string | null\r\n    'followed': boolean\r\n}\r\n\r\nexport type UsersInitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    users: [] as UsersInitialStatePropsType[],\r\n    pageSize: 10,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as number[]\r\n}\r\n\r\nexport const usersReducer = (state: UsersInitialStateType = initialState, action: ActionsType): UsersInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case USERS_ACTIONS.FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case USERS_ACTIONS.UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case USERS_ACTIONS.SET_USERS:\r\n            return {...state, users: [...action.users]}\r\n        case USERS_ACTIONS.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case USERS_ACTIONS.SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalCount: action.totalCount}\r\n        case USERS_ACTIONS.TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case USERS_ACTIONS.TOGGLE_IS_FOLLOWING_IN_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFollow\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : [...state.followingInProgress.filter(id => id !== action.userId)]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport type ActionsType = ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\n\r\n// Action Creators\r\nexport const followSuccess = (userID: number) => {\r\n    return {type: USERS_ACTIONS.FOLLOW, userID} as const\r\n}\r\nexport const unfollowSuccess = (userID: number) => {\r\n    return {type: USERS_ACTIONS.UNFOLLOW, userID} as const\r\n}\r\nexport const setUsers = (users: UsersInitialStatePropsType[]) => {\r\n    return {type: USERS_ACTIONS.SET_USERS, users} as const\r\n}\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {type: USERS_ACTIONS.SET_CURRENT_PAGE, currentPage} as const\r\n}\r\nexport const setTotalUsersCount = (totalCount: number) => {\r\n    return {type: USERS_ACTIONS.SET_TOTAL_USERS_COUNT, totalCount} as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {type: USERS_ACTIONS.TOGGLE_IS_FETCHING, isFetching} as const\r\n}\r\nexport const toggleFollowingProgress = (isFollow: boolean, userId: number) => {\r\n    return {type: USERS_ACTIONS.TOGGLE_IS_FOLLOWING_IN_PROGRESS, isFollow, userId} as const\r\n}\r\n\r\n// Thunk Creator\r\nexport const getUsers = (currentPage: number, pageSize: number) => (dispatch: Dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    usersAPI.getUsers(currentPage, pageSize)\r\n        .then((data) => {\r\n            dispatch(toggleIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        })\r\n}\r\nexport const follow = (userId: number) => (dispatch: Dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    usersAPI.follow(userId)\r\n        .then((data) => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(followSuccess(userId))\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            }\r\n        })\r\n}\r\nexport const unfollow = (userId: number) => (dispatch: Dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    usersAPI.unfollow(userId)\r\n        .then((data) => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(unfollowSuccess(userId))\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            }\r\n        })\r\n}","\r\nexport const SEND_MESSAGE = 'SEND-MESSAGE'\r\nexport const UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_DIALOG_MESSAGE'\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\n\r\ntype DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst initialState = {\r\n    newMessageBody: '',\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych',},\r\n        {id: 2, name: 'Nasty',},\r\n        {id: 3, name: 'Vova',},\r\n        {id: 4, name: 'Viktor',},\r\n        {id: 5, name: 'Olya',},\r\n    ] as DialogsType[],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'Dimych'},\r\n    ] as MessageType[]\r\n}\r\n\r\nexport type DialogsInitialStateType = typeof initialState\r\n\r\n/*export type AddMessageActionType = ReturnType<typeof sendMessageAC>\r\nexport type UpdateNewDialogMessageActionType = ReturnType<typeof updateNewMessageBodyAC>*/\r\nexport const dialogsReducer = (state: DialogsInitialStateType = initialState, action: dialogsActionsType): DialogsInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            const newMessage: MessageType = {\r\n                id: new Date().getTime(),\r\n                message: state.newMessageBody,\r\n            }\r\n            const trimmedText = state.newMessageBody.trim()\r\n            if (trimmedText) {\r\n                return {\r\n                    ...state,\r\n                    messages: [...state.messages, newMessage],\r\n                    newMessageBody: ''\r\n                }\r\n            }\r\n            return state\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            return {...state, newMessageBody: action.body}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport type dialogsActionsType = ReturnType<typeof sendMessageAC> | ReturnType<typeof updateNewMessageBodyAC>\r\n\r\nexport const sendMessageAC = () => {\r\n    return {type: SEND_MESSAGE} as const\r\n}\r\nexport const updateNewMessageBodyAC = (messageText: string) => {\r\n    return {type: UPDATE_NEW_MESSAGE_BODY, body: messageText} as const\r\n}\r\n","export type FriendsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type SidebarType = {\r\n    friends: Array<FriendsType>\r\n}\r\n\r\n\r\nconst initialState = {\r\n    friends: [\r\n        {id: 1, name: 'Dimych',},\r\n        {id: 2, name: 'Nasty',},\r\n        {id: 3, name: 'Vova',},\r\n    ] as FriendsType[]\r\n}\r\n\r\nexport type SidebarReducerInitialStateType = typeof initialState\r\n\r\nexport const sidebarReducer = (state: SidebarReducerInitialStateType = initialState, action: sidebarActionsType): SidebarReducerInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type sidebarActionsType = ReturnType<typeof sidebar>\r\n\r\nexport const sidebar = () => {\r\n    return {type: 'test'} as const\r\n}\r\n","import {authAPI} from '../API/api';\r\nimport {AppThunkType} from './store';\r\nimport {FormDataType} from '../Components/Login/LoginForm';\r\n\r\nexport enum USERS_ACTIONS {\r\n    SET_USER_DATA = 'SET_USER_DATA',\r\n}\r\n\r\n\r\nexport type authInitialStatePropsType = {\r\n    id: number | null\r\n    login: string | null\r\n    email: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nconst initialState: authInitialStatePropsType = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false,\r\n}\r\n\r\nexport const authReducer = (state: authInitialStatePropsType = initialState, action: authActionsType): authInitialStatePropsType => {\r\n\r\n    switch (action.type) {\r\n        case USERS_ACTIONS.SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuth: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\n// Action Creators\r\nexport type authActionsType = ReturnType<typeof setAuthUserData>\r\n\r\nexport const setAuthUserData = (id: number, login: string, email: string) => {\r\n    return {\r\n        type: USERS_ACTIONS.SET_USER_DATA,\r\n        payload: {\r\n            id,\r\n            login,\r\n            email\r\n        }\r\n    } as const\r\n}\r\n\r\n// Thunk Creator\r\n\r\n// export const getAuthUserData = () => (dispatch: Dispatch<authActionsType>) => {\r\n//     authAPI.me()\r\n//         .then((response: ResponseType) => {\r\n//             const {id, login, email} = response.data.data\r\n//             if (!response.data.resultCode) {\r\n//                 dispatch(setAuthUserData(id, login, email))\r\n//             }\r\n//         })\r\n// }\r\n\r\nexport const getAuthUserData = (): AppThunkType => async dispatch => {\r\n    try {\r\n        const response = await authAPI.me()\r\n        const {id, login, email} = response.data.data\r\n        if (!response.data.resultCode) {\r\n            dispatch(setAuthUserData(id, login, email))\r\n        }\r\n\r\n    } catch (e) {\r\n        throw new Error()\r\n    }\r\n\r\n}\r\nexport const loginTC = (formData: FormDataType): AppThunkType => async dispatch => {\r\n    try {\r\n        const {login, password, rememberMe} = formData\r\n        const response = await authAPI.login(login, password, rememberMe)\r\n\r\n        if (!response.data.resultCode) {\r\n            dispatch(getAuthUserData())\r\n        }\r\n\r\n    } catch (e) {\r\n        throw new Error()\r\n    }\r\n\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {profileActionsType, profileReducer} from './profile-reducer';\r\nimport {dialogsActionsType, dialogsReducer} from './dialogs-reducer';\r\nimport {sidebarActionsType, sidebarReducer} from './sidebar-reducer';\r\nimport {usersReducer} from './users-reducer';\r\nimport thunk, { ThunkAction } from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport {authActionsType, authReducer} from './auth-reducer';\r\nimport {reducer as formReducer} from 'redux-form'\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionsType = authActionsType | dialogsActionsType | profileActionsType | sidebarActionsType\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<\r\n    ReturnType,\r\n    AppStateType,\r\n    unknown,\r\n    AppActionsType\r\n    >\r\n\r\nexport let store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './../Dialogs.module.css';\n\ntype dialogItemType = {\n    name: string\n    id: number\n}\n\nconst DialogItem = (props: dialogItemType) => {\n    const path = `/dialogs/${props.id}`\n    return (\n        <div className={`${s.dialog}`}>\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\n        </div>)\n}\n\nexport default DialogItem;\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nexport type MessageItemType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageItemType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent} from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogsItem';\nimport Message from './Messages/Message';\nimport {DialogsPropsType} from './DialogsContainer';\n\n\nfunction Dialogs(props: DialogsPropsType) {\n\n    const state = props.dialogsPage\n\n    const dialogsElements = state.dialogs.map(dialogs => <DialogItem key={dialogs.id}\n                                                                           name={dialogs.name}\n                                                                           id={dialogs.id}/>)\n\n    const messagesElements = state.messages.map(message => <Message key={message.id}\n                                                                          message={message.message}/>)\n    const newMessageBody = state.newMessageBody\n\n\n    const onSendMessageClick = () => {\n        props.onSendMessage()\n    }\n    const onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n\n        const messageText = e.currentTarget.value;\n        props.updateNewMessageBody(messageText)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n                <div>\n                    <textarea placeholder={'Enter your message'}\n                              value={newMessageBody}\n                              onChange={onNewMessageChange}/>\n                </div>\n                <div>\n                    <button onClick={onSendMessageClick}>Send message</button>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\n\nexport default Dialogs;\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../redux/store';\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nfunction withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\nexport default withAuthRedirect;","import {DialogsInitialStateType, sendMessageAC, updateNewMessageBodyAC} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {compose, Dispatch} from 'redux';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport React from 'react';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsInitialStateType;\r\n}\r\ntype MapDispatchToPropsType = {\r\n    onSendMessage: () => void\r\n    updateNewMessageBody: (body: string) => void\r\n\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        onSendMessage() {\r\n            dispatch(sendMessageAC())\r\n        },\r\n        updateNewMessageBody(body: string) {\r\n            dispatch(updateNewMessageBodyAC(body))\r\n\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs)","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './Sidebar.module.css';\nimport {FriendsType, SidebarType} from '../../redux/sidebar-reducer';\nimport {SidebarPropsType} from './SidebarContainer';\n\n\nconst Sidebar: React.FC<SidebarPropsType> = (props) => {\n    return (\n        <aside className={s.sidebar}>\n            <nav >\n                <ul>\n                    <li><NavLink to={'/profile'} activeClassName={s.active}>Profile</NavLink></li>\n                    <li><NavLink to={'/dialogs'} activeClassName={s.active}>Messages</NavLink></li>\n                    <li><NavLink to={'/users'} activeClassName={s.active}>Users</NavLink></li>\n                </ul>\n            </nav>\n            <SidebarFriendsBlock friends={props.sidebar.friends}/>\n        </aside>\n    )\n}\n\nconst SidebarFriendsBlock: React.FC<SidebarType> = (props) => {\n\n    const friendItem = props.friends.map(friend => <Friend key={friend.id} id={friend.id} name={friend.name}/>)\n\n    return (\n        <div>\n            <h3>Friends</h3>\n            <div className={s.friendBlock}>\n                {friendItem}\n            </div>\n        </div>\n    )\n}\n\nconst Friend: React.FC<FriendsType> = (props) => {\n    return (\n        <div className={s.friend}>\n            <div className={s.imgProfilePhoto}/>\n            <p className={s.name}>{props.name}</p>\n        </div>\n    )\n}\n\nexport default Sidebar;\n","import Sidebar from './Sidebar';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {connect} from 'react-redux';\r\nimport { SidebarType } from '../../redux/sidebar-reducer';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    sidebar: SidebarType\r\n}\r\ntype MapDispatchToPropsType = {}\r\n\r\nexport type SidebarPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        sidebar: state.sidebar\r\n    }\r\n}\r\nconst mapDispatchToProps = () => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport const SidebarContainer = connect(mapStateToProps, mapDispatchToProps)(Sidebar)","export default __webpack_public_path__ + \"static/media/userPhoto.b89021c6.png\";","import React from 'react';\r\nimport userPhoto from '../../assets/images/userPhoto.png'\r\nimport styles from './UsersContainer.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {ResponseItemType} from '../../API/api';\r\n\r\ntype PropsType = {\r\n    users: ResponseItemType[]\r\n    totalCount: number,\r\n    pageSize: number\r\n    currentPage: number\r\n    followingInProgress: number[]\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    onPageChanged: (page: number) => void\r\n}\r\n\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n    const UsersEl = props.users.map((u) => {\r\n        return (\r\n            <div key={u.id}>\r\n                <div>\r\n                    <NavLink to={`profile/${u.id}`}><img src={u.photos.small !== null ? u.photos.small : userPhoto}\r\n                                                         className={styles.userPhoto} alt={'Avatar'}/></NavLink>\r\n                </div>\r\n                <div>\r\n                    {u.followed\r\n                        ? <button disabled={props.followingInProgress.some((id: number) => id === u.id)}\r\n                                  onClick={() => {props.unfollow(u.id)}}>Unfollow</button>\r\n\r\n                        : <button disabled={props.followingInProgress.some((id: number) => id === u.id)}\r\n                                  onClick={() => {props.follow(u.id)}}>Follow</button>}\r\n                </div>\r\n                <div>\r\n                    <div>{u.name}</div>\r\n                    <div>{u.status}</div>\r\n                </div>\r\n                <div>\r\n                    <div>{'u.location.country'}</div>\r\n                    <div>{'u.location.city'}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    // let pagesCount = Math.ceil(props.totalCount / props.pageSize)\r\n    const pages = []\r\n\r\n    for (let i = 1; i <= 30; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return <>\r\n\r\n        <div>\r\n            {pages.map(page => {\r\n                return <span\r\n                    key={page}\r\n                    className={props.currentPage === page ? styles.selectedPage : ''}\r\n                    onClick={() => {\r\n                        props.onPageChanged(page)\r\n                    }}\r\n                >{page} </span>\r\n            })}\r\n            {UsersEl}\r\n        </div>\r\n    </>\r\n}","import React from 'react'\r\nimport styles from './Preloader.module.css'\r\n\r\n\r\n\r\nexport const Preloader = () => {\r\n    return <>\r\n            <div className={styles.ldsHourglass}/>\r\n    </>\r\n}","import React from 'react';\r\nimport {Users} from './Users';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {\r\n    follow,\r\n    getUsers,\r\n    setCurrentPage,\r\n    unfollow,\r\n    UsersInitialStatePropsType\r\n} from '../../redux/users-reducer';\r\nimport {Preloader} from '../common/Preloader/Preloader';\r\n\r\n\r\nexport class UsersContainerAPI extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (page: number) => {\r\n        this.props.getUsers(page, this.props.pageSize)\r\n        this.props.setCurrentPage(page)\r\n    }\r\n\r\n    onFollow = (id: number) => {\r\n        this.props.follow(id)\r\n    }\r\n    onUnFollow = (id: number) => {\r\n        this.props.unfollow(id)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching && <Preloader/>}\r\n            <Users users={this.props.users}\r\n                   currentPage={this.props.currentPage}\r\n                   pageSize={this.props.pageSize}\r\n                   totalCount={this.props.totalCount}\r\n                   onPageChanged={this.onPageChanged}\r\n                   follow={this.onFollow}\r\n                   unfollow={this.onUnFollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    users: UsersInitialStatePropsType[]\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalCount: state.usersPage.totalCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n    }\r\n}\r\n\r\nconst connector = connect(mapStateToProps, {\r\n    setCurrentPage,\r\n    getUsers,\r\n    follow,\r\n    unfollow\r\n})\r\n\r\nexport type UsersPropsType = ConnectedProps<typeof connector>\r\n\r\nexport default connector(UsersContainerAPI)","import React from 'react';\r\n\r\ntype PropsType = {\r\n    title: string\r\n    onChange: (value: string) => void\r\n}\r\n\r\nclass EditableSpan extends React.Component<PropsType> {\r\n    state = {\r\n        editMode: false,\r\n        title: this.props.title,\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            editMode: true,\r\n        })\r\n    }\r\n    DeactivateEditMode = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            editMode: false,\r\n        })\r\n        this.props.onChange(this.state.title)\r\n    }\r\n\r\n    onChange = (e: any) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (prevProps.title !== this.state.title) {\r\n            this.setState({\r\n                title: this.props.title\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode && <div>\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.title || 'Status is not defined'}</span>\r\n                </div>}\r\n                {this.state.editMode && <div>\r\n                    <input\r\n                        type={'text'}\r\n                        value={this.state.title}\r\n                        onBlur={this.DeactivateEditMode}\r\n                        onChange={this.onChange}\r\n                        autoFocus\r\n                    />\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditableSpan;","import React from 'react';\r\nimport styles from './ProfileData.module.css'\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport defaultUserPhoto from '../../../assets/images/userPhoto.png'\r\nimport EditableSpan from '../../common/EditableSpan/EditableSpan';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nconst ProfileData = (props: PropsType) => {\r\n    const {profile} = props\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={styles.profileData}>\r\n            <img src={profile.photos.small ? profile.photos.small : defaultUserPhoto} alt=\"profile avatar\"/>\r\n            <div>\r\n                <h3>{profile.fullName}</h3>\r\n            </div>\r\n\r\n            <EditableSpan title={props.status} onChange={props.updateStatus}/>\r\n\r\n            {profile.aboutMe && <div>\r\n                <h3>About me:</h3>\r\n                <span>{profile.aboutMe}</span>\r\n            </div>}\r\n            <div>\r\n                <h3>My contacts:</h3>\r\n                <ProfileContacts contacts={profile.contacts}/>\r\n            </div>\r\n            {profile.lookingForAJob && <div>\r\n                <h3>Ищу работу</h3>\r\n                {profile.lookingForAJobDescription}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData;\r\n\r\ntype ProfileContactsType = {\r\n    contacts: {\r\n        'facebook': string | null\r\n        'website': string | null\r\n        'vk': string | null\r\n        'twitter': string | null\r\n        'instagram': string | null\r\n        'youtube': string | null\r\n        'github': string | null\r\n        'mainLink': string | null\r\n    }\r\n}\r\n\r\nconst ProfileContacts = (props: ProfileContactsType) => {\r\n\r\n    const netWork = Object.keys(props.contacts)\r\n    const netWorkLinks = Object.values(props.contacts)\r\n\r\n    netWork.map(key => (<div>{key}</div>))\r\n\r\n    return (\r\n        <div className={styles.wrapperContacts}>\r\n\r\n            <div className={styles.contacts}>{netWork.map(key => {\r\n                return (\r\n                    <div>\r\n                        {key}\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n\r\n            <div className={styles.contacts}>{netWorkLinks.map(value => {\r\n                return (\r\n                    <div>\r\n                        {value ? value : 'Не заполнено'}\r\n                    </div>\r\n                )\r\n            })\r\n            }</div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\nimport {PostType} from '../../../../redux/profile-reducer';\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://d13ezvd6yrslxm.cloudfront.net/wp/wp-content/images/avatar-2-story.jpg\"\r\n                 alt=\"Logo with Profile\"/>\r\n            <p>{props.message}</p>\r\n            <p>Like {props.likesCount}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import {addPostActionCreator, PostType, updateNewPostTextAC} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/store';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    newPostText: string\r\n    posts: Array<PostType>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost() {\r\n            dispatch(addPostActionCreator())\r\n        },\r\n        updateNewPostText(text: string) {\r\n            dispatch(updateNewPostTextAC(text))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React, {ChangeEvent} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\n\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    const postsElements = props.posts.map(post =>\r\n        <Post\r\n            key={post.id}\r\n            id={post.id}\r\n            message={post.message}\r\n            likesCount={post.likesCount}/>)\r\n\r\n    const onAddPost = () => {\r\n        props.addPost()\r\n    }\r\n\r\n    const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        const text = e.currentTarget.value\r\n        props.updateNewPostText(text)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Posts</h3>\r\n            <div className={s.new_post}>\r\n                <div>\r\n                    <textarea value={props.newPostText} onChange={onPostChange}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileData from './ProfileData/ProfileData';\r\nimport {MyPostsContainer} from './Posts/MyPostsContainer';\r\nimport {ProfilePropsType} from './ProfileContainer';\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            {/*<ProfileLogo />*/}\r\n            <ProfileData\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\nimport Profile from './Profile';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n// Component own properties\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = '15859'\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        // if (!this.props.isAuth) {\r\n        //     return <Redirect to={'/login'}/>\r\n        // }\r\n        return <Profile {...this.props}\r\n                        profile={this.props.profile}\r\n                        status={this.props.status}\r\n                        updateStatus={this.props.updateStatus}\r\n        />\r\n    }\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\nexport type ProfilePropsType = ConnectedProps<typeof connector>;\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status\r\n    }\r\n}\r\n\r\n\r\nconst connector = connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connector,\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport s from './Header.module.css';\nimport { NavLink } from 'react-router-dom';\nimport {HeaderPropsType} from './HeaderContainer';\n\nexport const Header = (props: HeaderPropsType) => {\n  return (\n    <header className={s.header}>\n        <img src={logo} alt=\"\"/>\n\n        <div className={s.loginBlock}>\n            {props.isAuth ? props.login : <NavLink to={'/Login'}>Login</NavLink> }\n\n        </div>\n    </header>\n  );\n}\n","import React from 'react';\nimport {Header} from './Header';\nimport {connect, ConnectedProps} from 'react-redux';\nimport {getAuthUserData} from '../../redux/auth-reducer';\nimport {AppStateType} from '../../redux/store';\n\nexport class HeaderContainer extends React.Component<HeaderPropsType> {\n    componentDidMount() {\n        this.props.getAuthUserData()\n    }\n\n    render() {\n        return (<Header {...this.props}/>);\n    }\n}\n\ntype MapStateToProps = {\n    isAuth: boolean\n    login: string | null\n}\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login,\n    }\n}\n\nconst connector = connect(mapStateToProps, {\n    getAuthUserData\n})\nexport type HeaderPropsType = ConnectedProps<typeof connector>;\n\nexport default connector(HeaderContainer);","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\n\r\nexport type FormDataType = {\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ninterface Props {}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps <FormDataType, Props>> = props => {\r\n    return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field component={'input'} name={'login'} placeholder={'Login'}/>\r\n                </div>\r\n                <div>\r\n                    <Field component={'input'} name={'password'} placeholder={'Password'} type={'password'}/>\r\n                </div>\r\n                <div>\r\n                    <Field component={'input'} name={'rememberMe'} type={'checkbox'}/>\r\n                </div>\r\n                <div>\r\n                    <button>Login</button>\r\n                </div>\r\n            </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'Login'}) (LoginForm)\r\n\r\nexport default LoginReduxForm;","import React from 'react';\r\nimport LoginReduxForm, {FormDataType} from './LoginForm';\r\nimport {loginTC} from '../../redux/auth-reducer';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\n\r\nconst LoginPage: React.FC<Props> = props => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.loginTC(formData)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype Props = ConnectedProps<typeof connector>\r\n\r\nconst connector = connect(null, {loginTC})\r\n\r\n\r\nexport default connector(LoginPage)","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Route} from 'react-router-dom';\r\nimport DialogsContainer from './Components/Dialogs/DialogsContainer';\r\nimport {SidebarContainer} from './Components/Sidebar/SidebarContainer';\r\nimport UsersContainer from './Components/Users/UsersContainer';\r\nimport ProfileContainer from './Components/Profile/ProfileContainer';\r\nimport HeaderContainer from './Components/Header/HeaderContainer';\r\nimport LoginPage from './Components/Login/LoginPage';\r\n\r\nconst App = () => {\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"app_wrapper\">\r\n                <HeaderContainer />\r\n                <SidebarContainer/>\r\n                <div className={'app_wrapper_content'}>\r\n                    <Route path=\"/login\" render={() => <LoginPage/>}/>\r\n                    <Route path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\r\n\r\n                    <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\r\n                    <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n                </div>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from './redux/store';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n\r\n    </React.StrictMode>, document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileData\":\"ProfileData_profileData__3_er9\",\"wrapperContacts\":\"ProfileData_wrapperContacts__2yaPx\",\"contacts\":\"ProfileData_contacts__22veH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1qs7u\",\"posts\":\"MyPosts_posts__tbkbY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"UsersContainer_userPhoto__1HjXU\",\"selectedPage\":\"UsersContainer_selectedPage__2syrM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2x0-v\",\"loginBlock\":\"Header_loginBlock__1i9Ib\"};"],"sourceRoot":""}