{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Profile/Posts/MyPosts.module.css","Components/Header/Header.module.css","Components/Profile/Profile.module.css","Components/Profile/ProfileLogo/ProfileLogo.module.css","Components/Profile/ProfileData/ProfileData.module.css","Components/Profile/Posts/Post/Post.module.css","reportWebVitals.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","Components/Header/logo.svg","Components/Header/Header.tsx","Components/Profile/ProfileLogo/ProfileLogo.tsx","Components/Profile/ProfileData/ProfileData.tsx","Components/Profile/Posts/Post/Post.tsx","Components/Profile/Posts/MyPostsContainer.tsx","Components/Profile/Posts/MyPosts.tsx","Components/Profile/Profile.tsx","Components/Dialogs/DialogItem/DialogsItem.tsx","Components/Dialogs/Messages/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Sidebar/Sidebar.tsx","Components/Sidebar/SidebarContainer.tsx","App.tsx","index.tsx","Components/Sidebar/Sidebar.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","newPostText","posts","id","message","likesCount","ADD_POST","UPDATE_NEW_POST_TEXT","newMessageBody","dialogs","name","messages","SEND_MESSAGE","UPDATE_NEW_MESSAGE_BODY","friends","rootReducer","combineReducers","profilePage","state","action","type","newPost","Date","getTime","trimmedText","newText","dialogsPage","newMessage","trim","body","sidebar","store","createStore","Header","className","s","header","src","logo","alt","ProfileLogo","profile_logo","ProfileData","profileData","Post","props","item","MyPostsContainer","connect","dispatch","addPost","updateNewPostText","text","postsElements","map","post","postsBlock","new_post","value","onChange","e","currentTarget","onClick","Profile","profile","DialogItem","path","dialog","to","activeClassName","active","Message","Dialogs","dialogsElements","messagesElements","dialogsItems","placeholder","messageText","updateNewMessageBody","onSendMessage","DialogsContainer","SidebarFriendsBlock","friendItem","friend","friendBlock","Friend","imgProfilePhoto","Sidebar","SidebarContainer","App","render","rerenderEntireTree","ReactDOM","StrictMode","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.7ad4edc5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__BRHD6\",\"dialogsItems\":\"Dialogs_dialogsItems__1aH1f\",\"dialog\":\"Dialogs_dialog__1glHE\",\"active\":\"Dialogs_active__3NWs5\",\"messanges\":\"Dialogs_messanges__WVkjx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1qs7u\",\"posts\":\"MyPosts_posts__tbkbY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2x0-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__CiwxZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile_logo\":\"ProfileLogo_profile_logo__1nkul\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileData\":\"ProfileData_profileData__3_er9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2q3Eb\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ActionsType} from './redux-store';\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst initialState = {\r\n    newPostText: '',\r\n    posts: [\r\n        {\r\n            id: 1,\r\n            message: 'Good this site',\r\n            likesCount: 10\r\n        },\r\n        {\r\n            id: 1,\r\n            message: 'Good this site',\r\n            likesCount: 10\r\n        }\r\n    ] as PostType[],\r\n}\r\nexport type ProfileReducerInitialStateType = typeof initialState\r\n\r\nexport const ADD_POST = 'ADD-POST'\r\n\r\nexport const UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT'\r\n\r\nexport type AddPostActionType = ReturnType<typeof addPostActionCreator>\r\nexport type UpdateNewPostTextActionType = ReturnType<typeof updateNewPostTextAC>\r\n\r\nexport const addPostActionCreator = () => {\r\n    return {type: ADD_POST} as const\r\n}\r\nexport const updateNewPostTextAC = (postText: string) => {\r\n    return {type: UPDATE_NEW_POST_TEXT, newText: postText} as const\r\n}\r\n\r\nexport const profileReducer = (state: ProfileReducerInitialStateType = initialState, action: ActionsType): ProfileReducerInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            }\r\n            const trimmedText = newPost.message\r\n            if (trimmedText) {\r\n                return {\r\n                    ...state,\r\n                    posts: [...state.posts, newPost],\r\n                    newPostText: ''\r\n                }\r\n            }\r\n\r\n            return state\r\n        case UPDATE_NEW_POST_TEXT:\r\n            return {...state, newPostText: action.newText}\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}","import {ActionsType} from './redux-store';\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\ntype DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\n\r\nconst initialState = {\r\n    newMessageBody: '',\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych',},\r\n        {id: 2, name: 'Nasty',},\r\n        {id: 3, name: 'Vova',},\r\n        {id: 4, name: 'Viktor',},\r\n        {id: 5, name: 'Olya',},\r\n    ] as DialogsType[],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'Dimych'},\r\n    ] as MessageType[]\r\n}\r\n\r\nexport type DialogsInitialStateType = typeof initialState\r\n\r\nexport const SEND_MESSAGE = 'SEND-MESSAGE'\r\nexport const UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_DIALOG_MESSAGE'\r\n\r\nexport type AddMessageActionType = ReturnType<typeof sendMessageAC>\r\nexport type UpdateNewDialogMessageActionType = ReturnType<typeof updateNewMessageBodyAC>\r\n\r\nexport const sendMessageAC = () => {\r\n    return {type: SEND_MESSAGE} as const\r\n}\r\nexport const updateNewMessageBodyAC = (messageText: string) => {\r\n    return {type: UPDATE_NEW_MESSAGE_BODY, body: messageText} as const\r\n}\r\n\r\nexport const dialogsReducer = (state: DialogsInitialStateType = initialState, action: ActionsType): DialogsInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            const newMessage: MessageType = {\r\n                id: new Date().getTime(),\r\n                message: state.newMessageBody,\r\n            }\r\n            const trimmedText = state.newMessageBody.trim()\r\n            if (trimmedText) {\r\n                return {\r\n                    ...state,\r\n                    messages: [...state.messages, newMessage],\r\n                    newMessageBody: ''\r\n                }\r\n            }\r\n            return state\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            return {...state, newMessageBody: action.body}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {ActionsType} from './redux-store';\r\n\r\nexport type FriendsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type SidebarType = {\r\n    friends: Array<FriendsType>\r\n}\r\n\r\n\r\nconst initialState = {\r\n    friends: [\r\n        {id: 1, name: 'Dimych',},\r\n        {id: 2, name: 'Nasty',},\r\n        {id: 3, name: 'Vova',},\r\n    ] as FriendsType[]\r\n}\r\n\r\nexport type SidebarReducerInitialStateType = typeof initialState\r\n\r\nexport const sidebarReducer = (state: SidebarReducerInitialStateType = initialState, action: ActionsType): SidebarReducerInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers, createStore} from 'redux';\r\nimport {AddPostActionType, profileReducer, UpdateNewPostTextActionType} from './profile-reducer';\r\nimport {AddMessageActionType, dialogsReducer, UpdateNewDialogMessageActionType} from './dialogs-reducer';\r\nimport {sidebarReducer} from './sidebar-reducer';\r\n\r\nexport type ActionsType = AddPostActionType\r\n    | UpdateNewPostTextActionType\r\n    | AddMessageActionType\r\n    | UpdateNewDialogMessageActionType;\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore(rootReducer)","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport s from './Header.module.css';\n\nfunction Header() {\n  return (\n    <header className={s.header}>\n        <img src={logo} alt=\"\"/>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport s from './ProfileLogo.module.css';\n\nfunction ProfileLogo() {\n    return (\n        <div className={s.profile_logo}/>\n)\n}\n\nexport default ProfileLogo;\n","import React from \"react\";\r\nimport s from \"./ProfileData.module.css\"\r\n\r\nconst ProfileData = () => {\r\n    return (\r\n        <div className={s.profileData}>\r\n            <img src=\"https://d13ezvd6yrslxm.cloudfront.net/wp/wp-content/images/avatar-2-story.jpg\" alt=\"profile avatar\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData;","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\nimport {PostType} from '../../../../redux/profile-reducer';\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://d13ezvd6yrslxm.cloudfront.net/wp/wp-content/images/avatar-2-story.jpg\"\r\n                 alt=\"Logo with Profile\"/>\r\n            <p>{props.message}</p>\r\n            <p>Like {props.likesCount}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import {addPostActionCreator, PostType, updateNewPostTextAC} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    newPostText: string\r\n    posts: Array<PostType>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost() {\r\n            dispatch(addPostActionCreator())\r\n        },\r\n        updateNewPostText(text: string) {\r\n            dispatch(updateNewPostTextAC(text))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React, {ChangeEvent} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\n\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    const postsElements = props.posts.map(post =>\r\n        <Post\r\n            key={post.id}\r\n            id={post.id}\r\n            message={post.message}\r\n            likesCount={post.likesCount}/>)\r\n\r\n    const onAddPost = () => {\r\n        props.addPost()\r\n    }\r\n\r\n    const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        const text = e.currentTarget.value\r\n        props.updateNewPostText(text)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Posts</h3>\r\n            <div className={s.new_post}>\r\n                <div>\r\n                    <textarea value={props.newPostText} onChange={onPostChange}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileLogo from './ProfileLogo/ProfileLogo';\r\nimport ProfileData from './ProfileData/ProfileData';\r\nimport {MyPostsContainer} from './Posts/MyPostsContainer';\r\nimport {AppStateType} from '../../redux/redux-store';\r\n\r\nexport type PropsType = {\r\n    store: AppStateType\r\n}\r\n\r\nfunction Profile() {\r\n\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileLogo />\r\n            <ProfileData />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './../Dialogs.module.css';\n\ntype dialogItemType = {\n    name: string\n    id: number\n}\n\nconst DialogItem = (props: dialogItemType) => {\n    const path = `/dialogs/${props.id}`\n    return (\n        <div className={`${s.dialog}`}>\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\n        </div>)\n}\n\nexport default DialogItem;\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nexport type MessageItemType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageItemType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent} from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogsItem';\nimport Message from './Messages/Message';\nimport {DialogsPropsType} from './DialogsContainer';\n\n\nfunction Dialogs(props: DialogsPropsType) {\n\n    const state = props.dialogsPage\n\n    const dialogsElements = state.dialogs.map(dialogs => <DialogItem key={dialogs.id}\n                                                                           name={dialogs.name}\n                                                                           id={dialogs.id}/>)\n\n    const messagesElements = state.messages.map(message => <Message key={message.id}\n                                                                          message={message.message}/>)\n    const newMessageBody = state.newMessageBody\n\n\n    const onSendMessageClick = () => {\n        props.onSendMessage()\n    }\n    const onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n\n        const messageText = e.currentTarget.value;\n        props.updateNewMessageBody(messageText)\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n                <div>\n                    <textarea placeholder={'Enter your message'}\n                              value={newMessageBody}\n                              onChange={onNewMessageChange}/>\n                </div>\n                <div>\n                    <button onClick={onSendMessageClick}>Send message</button>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\n\nexport default Dialogs;\n","import {DialogsInitialStateType, sendMessageAC, updateNewMessageBodyAC} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsInitialStateType;\r\n}\r\ntype MapDispatchToPropsType = {\r\n    onSendMessage: () => void\r\n    updateNewMessageBody: (body: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        onSendMessage() {\r\n            dispatch(sendMessageAC())\r\n        },\r\n        updateNewMessageBody(body: string) {\r\n            dispatch(updateNewMessageBodyAC(body))\r\n\r\n        },\r\n    }\r\n}\r\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './Sidebar.module.css';\nimport {FriendsType, SidebarType} from '../../redux/sidebar-reducer';\nimport {SidebarPropsType} from './SidebarContainer';\n\n\nconst Sidebar: React.FC<SidebarPropsType> = (props) => {\n    return (\n        <aside className={s.sidebar}>\n            <nav >\n                <ul>\n                    <li><NavLink to={'/profile'} activeClassName={s.active}>Profile</NavLink></li>\n                    <li><NavLink to={'/dialogs'} activeClassName={s.active}>Messages</NavLink></li>\n                    <li><NavLink to={'/news'} activeClassName={s.active}>News</NavLink></li>\n                    <li><NavLink to={'/music'} activeClassName={s.active}>Music</NavLink></li>\n                    <li><NavLink to={'/settings'} activeClassName={s.active}>Settings</NavLink></li>\n                </ul>\n            </nav>\n            <SidebarFriendsBlock friends={props.sidebar.friends}/>\n        </aside>\n    )\n}\n\nconst SidebarFriendsBlock: React.FC<SidebarType> = (props) => {\n\n    const friendItem = props.friends.map(friend => <Friend key={friend.id} id={friend.id} name={friend.name}/>)\n\n    return (\n        <div>\n            <h3>Friends</h3>\n            <div className={s.friendBlock}>\n                {friendItem}\n            </div>\n        </div>\n    )\n}\n\nconst Friend: React.FC<FriendsType> = (props) => {\n    return (\n        <div className={s.friend}>\n            <div className={s.imgProfilePhoto}/>\n            <p className={s.name}>{props.name}</p>\n        </div>\n    )\n}\n\nexport default Sidebar;\n","import Sidebar from './Sidebar';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport { SidebarType } from '../../redux/sidebar-reducer';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    sidebar: SidebarType\r\n}\r\ntype MapDispatchToPropsType = {}\r\n\r\nexport type SidebarPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        sidebar: state.sidebar\r\n    }\r\n}\r\nconst mapDispatchToProps = () => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport const SidebarContainer = connect(mapStateToProps, mapDispatchToProps)(Sidebar)","import React from 'react';\r\nimport './App.css';\r\nimport Header from './Components/Header/Header';\r\nimport Profile from './Components/Profile/Profile';\r\nimport {HashRouter, Route} from 'react-router-dom';\r\nimport {ActionsType, store} from './redux/redux-store';\r\nimport {DialogsContainer} from './Components/Dialogs/DialogsContainer';\r\nimport {SidebarContainer} from './Components/Sidebar/SidebarContainer';\r\n\r\n// export type AppStateType = {\r\n//     store: StoreType\r\n//     addPost: () => void\r\n//     addMessage: () => void\r\n//     updateNewPostText: (newText: string) => void\r\n//     updateNewDialogMessage: (newText: string) => void\r\n// }\r\n\r\ntype PropsType = {\r\n    store: typeof store\r\n    dispatch: (action: ActionsType) => void\r\n}\r\n\r\nconst App = () => {\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"app_wrapper\">\r\n                <Header/>\r\n                <SidebarContainer/>\r\n                <div className={'app_wrapper_content'}>\r\n                    <Route path='/profile' render={() => <Profile/>}/>\r\n\r\n                    <Route path='/dialogs' render={() => <DialogsContainer />}/>\r\n                </div>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from './redux/redux-store';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\nexport const rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n\r\n        </React.StrictMode>, document.getElementById('root')\r\n    )\r\n}\r\n\r\nrerenderEntireTree()\r\n\r\nstore.subscribe(() => {\r\n    rerenderEntireTree()\r\n})\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__13B6p\",\"active\":\"Sidebar_active__2WsD6\",\"friendBlock\":\"Sidebar_friendBlock__2oXRU\",\"friend\":\"Sidebar_friend__3Y_SH\",\"name\":\"Sidebar_name__2Hl5y\",\"imgProfilePhoto\":\"Sidebar_imgProfilePhoto__1UA-e\"};"],"sourceRoot":""}