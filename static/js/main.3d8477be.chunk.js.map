{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Sidebar/Sidebar.module.css","Components/Profile/ProfileData/ProfileData.module.css","Components/Profile/Posts/MyPosts.module.css","Components/Users/UsersContainer.module.css","Components/Header/Header.module.css","Components/common/Preloader/Preloader.module.css","Components/Profile/Profile.module.css","Components/Profile/Posts/Post/Post.module.css","redux/profile-reducer.ts","reportWebVitals.ts","redux/users-reducer.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","Components/Header/logo.svg","Components/Header/Header.tsx","Components/Dialogs/DialogItem/DialogsItem.tsx","Components/Dialogs/Messages/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Sidebar/Sidebar.tsx","Components/Sidebar/SidebarContainer.tsx","assets/images/userPhoto.png","Components/Users/Users.tsx","Components/common/Preloader/Preloader.tsx","Components/Users/UsersContainer.tsx","Components/Profile/ProfileData/ProfileData.tsx","Components/Profile/Posts/Post/Post.tsx","Components/Profile/Posts/MyPostsContainer.tsx","Components/Profile/Posts/MyPosts.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","App.tsx","index.tsx"],"names":["module","exports","PROFILE_ACTION_TYPE","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","USERS_ACTIONS","initialState","newPostText","posts","id","message","likesCount","profile","SEND_MESSAGE","UPDATE_NEW_MESSAGE_BODY","newMessageBody","dialogs","name","messages","friends","users","pageSize","totalCount","currentPage","isFetching","rootReducer","combineReducers","profilePage","state","action","type","ADD_POST","newPost","Date","getTime","trimmedText","UPDATE_NEW_POST_TEXT","newText","SET_USER_PROFILE","dialogsPage","newMessage","trim","body","sidebar","usersPage","FOLLOW","map","u","userID","followed","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","store","createStore","composeWithDevTools","applyMiddleware","thunk","Header","className","s","header","src","logo","alt","DialogItem","props","path","dialog","to","activeClassName","active","Message","Dialogs","dialogsElements","messagesElements","dialogsItems","placeholder","value","onChange","e","messageText","currentTarget","updateNewMessageBody","onClick","onSendMessage","DialogsContainer","connect","dispatch","SidebarFriendsBlock","friendItem","friend","friendBlock","Friend","imgProfilePhoto","Sidebar","SidebarContainer","Users","UsersEl","photos","small","userPhoto","styles","unfollow","follow","status","pages","i","push","page","selectedPage","onPageChanged","Preloader","ldsHourglass","UsersContainerAPI","setCurrentPage","toggleIsFetching","axios","get","response","setUsers","data","items","this","setTotalUsersCount","React","Component","mapDispatchToProps2","ProfileData","profileData","fullName","aboutMe","contacts","lookingForAJob","lookingForAJobDescription","ProfileContacts","netWork","Object","keys","netWorkLinks","values","key","wrapperContacts","Post","item","MyPostsContainer","addPost","updateNewPostText","text","postText","postsElements","post","postsBlock","new_post","Profile","ProfileContainer","setUserProfile","connector","App","render","UsersContainer","rerenderEntireTree","ReactDOM","StrictMode","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.3d8477be.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__BRHD6\",\"dialogsItems\":\"Dialogs_dialogsItems__1aH1f\",\"dialog\":\"Dialogs_dialog__1glHE\",\"active\":\"Dialogs_active__3NWs5\",\"messanges\":\"Dialogs_messanges__WVkjx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__13B6p\",\"active\":\"Sidebar_active__2WsD6\",\"friendBlock\":\"Sidebar_friendBlock__2oXRU\",\"friend\":\"Sidebar_friend__3Y_SH\",\"name\":\"Sidebar_name__2Hl5y\",\"imgProfilePhoto\":\"Sidebar_imgProfilePhoto__1UA-e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileData\":\"ProfileData_profileData__3_er9\",\"wrapperContacts\":\"ProfileData_wrapperContacts__2yaPx\",\"contacts\":\"ProfileData_contacts__22veH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1qs7u\",\"posts\":\"MyPosts_posts__tbkbY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"UsersContainer_userPhoto__1HjXU\",\"selectedPage\":\"UsersContainer_selectedPage__2syrM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2x0-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__3XCPk\",\"ldsHourglass\":\"Preloader_ldsHourglass__pzUo-\",\"lds-hourglass\":\"Preloader_lds-hourglass__1hkv0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__CiwxZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2q3Eb\"};","export enum PROFILE_ACTION_TYPE {\r\n    ADD_POST = 'ADD-POST',\r\n    UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT',\r\n    SET_USER_PROFILE = 'SET_PROFILE_INFO-NEW-POST-TEXT',\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfileType = {\r\n    'aboutMe': string | null\r\n    'contacts': {\r\n        'facebook': string | null\r\n        'website': string | null\r\n        'vk': string | null\r\n        'twitter': string | null\r\n        'instagram': string | null\r\n        'youtube': string | null\r\n        'github': string | null\r\n        'mainLink': string | null\r\n    },\r\n    'lookingForAJob': string | null\r\n    'lookingForAJobDescription': string | null\r\n    'fullName': string | null\r\n    'userId': number\r\n    'photos': {\r\n        'small': string | null\r\n        'large': string | null\r\n    }\r\n}\r\nconst initialState = {\r\n    newPostText: '',\r\n    posts: [\r\n        {\r\n            id: 1,\r\n            message: 'Good this site',\r\n            likesCount: 10\r\n        },\r\n        {\r\n            id: 2,\r\n            message: 'Good this site',\r\n            likesCount: 10\r\n        }\r\n    ] as PostType[],\r\n    profile: null as ProfileType | null,\r\n}\r\n\r\nexport type ProfileReducerInitialStateType = typeof initialState\r\n\r\n\r\nexport const profileReducer = (state: ProfileReducerInitialStateType = initialState, action: ActionsType): ProfileReducerInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case PROFILE_ACTION_TYPE.ADD_POST:\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            }\r\n            const trimmedText = newPost.message\r\n            if (trimmedText) {\r\n                return {\r\n                    ...state,\r\n                    posts: [...state.posts, newPost],\r\n                    newPostText: ''\r\n                }\r\n            }\r\n\r\n            return state\r\n        case PROFILE_ACTION_TYPE.UPDATE_NEW_POST_TEXT:\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n        case PROFILE_ACTION_TYPE.SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof addPostActionCreator>\r\n    | ReturnType<typeof updateNewPostTextAC>\r\n    | ReturnType<typeof setUserProfile>\r\n\r\nexport const addPostActionCreator = () => {\r\n    return {type: PROFILE_ACTION_TYPE.ADD_POST} as const\r\n}\r\nexport const updateNewPostTextAC = (postText: string) => {\r\n    return {type: PROFILE_ACTION_TYPE.UPDATE_NEW_POST_TEXT, newText: postText} as const\r\n}\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {type: PROFILE_ACTION_TYPE.SET_USER_PROFILE, profile} as const\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export enum USERS_ACTIONS {\r\n    FOLLOW = 'FOLLOW',\r\n    UNFOLLOW = 'UNFOLLOW',\r\n    SET_USERS = 'SET_USERS',\r\n    SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',\r\n    SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT',\r\n    TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING',\r\n}\r\n\r\n\r\nexport type UsersInitialStatePropsType = {\r\n    'name': string\r\n    'id': number\r\n    'uniqueUrlName': string | null\r\n    'photos': {\r\n        'small': string | null\r\n        'large': string | null\r\n    },\r\n    'status': string | null\r\n    'followed': boolean\r\n}\r\n\r\nconst initialState = {\r\n    users: [] as UsersInitialStatePropsType[],\r\n    pageSize: 10,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n}\r\n\r\nexport const usersReducer = (state: UsersInitialStateType = initialState, action: ActionsType): UsersInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case USERS_ACTIONS.FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case USERS_ACTIONS.UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case USERS_ACTIONS.SET_USERS:\r\n            return {...state, users: [...action.users]}\r\n        case USERS_ACTIONS.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case USERS_ACTIONS.SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalCount: action.totalCount}\r\n        case USERS_ACTIONS.TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport type UsersInitialStateType = typeof initialState\r\n\r\n\r\nexport type ActionsType = ReturnType<typeof follow>\r\n    | ReturnType<typeof unfollow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n\r\nexport const follow = (userID: number) => {\r\n    return {type: USERS_ACTIONS.FOLLOW, userID} as const\r\n}\r\nexport const unfollow = (userID: number) => {\r\n    return {type: USERS_ACTIONS.UNFOLLOW, userID} as const\r\n}\r\nexport const setUsers = (users: UsersInitialStatePropsType[]) => {\r\n    return {type: USERS_ACTIONS.SET_USERS, users} as const\r\n}\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {type: USERS_ACTIONS.SET_CURRENT_PAGE, currentPage} as const\r\n}\r\nexport const setTotalUsersCount = (totalCount: number) => {\r\n    return {type: USERS_ACTIONS.SET_TOTAL_USERS_COUNT, totalCount} as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {type: USERS_ACTIONS.TOGGLE_IS_FETCHING, isFetching} as const\r\n}\r\n","\r\nexport const SEND_MESSAGE = 'SEND-MESSAGE'\r\nexport const UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_DIALOG_MESSAGE'\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\n\r\ntype DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst initialState = {\r\n    newMessageBody: '',\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych',},\r\n        {id: 2, name: 'Nasty',},\r\n        {id: 3, name: 'Vova',},\r\n        {id: 4, name: 'Viktor',},\r\n        {id: 5, name: 'Olya',},\r\n    ] as DialogsType[],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'Dimych'},\r\n    ] as MessageType[]\r\n}\r\n\r\nexport type DialogsInitialStateType = typeof initialState\r\n\r\n/*export type AddMessageActionType = ReturnType<typeof sendMessageAC>\r\nexport type UpdateNewDialogMessageActionType = ReturnType<typeof updateNewMessageBodyAC>*/\r\n\r\ntype ActionsType = ReturnType<typeof sendMessageAC> | ReturnType<typeof updateNewMessageBodyAC>\r\n\r\nexport const sendMessageAC = () => {\r\n    return {type: SEND_MESSAGE} as const\r\n}\r\nexport const updateNewMessageBodyAC = (messageText: string) => {\r\n    return {type: UPDATE_NEW_MESSAGE_BODY, body: messageText} as const\r\n}\r\n\r\nexport const dialogsReducer = (state: DialogsInitialStateType = initialState, action: ActionsType): DialogsInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            const newMessage: MessageType = {\r\n                id: new Date().getTime(),\r\n                message: state.newMessageBody,\r\n            }\r\n            const trimmedText = state.newMessageBody.trim()\r\n            if (trimmedText) {\r\n                return {\r\n                    ...state,\r\n                    messages: [...state.messages, newMessage],\r\n                    newMessageBody: ''\r\n                }\r\n            }\r\n            return state\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            return {...state, newMessageBody: action.body}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","export type FriendsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type SidebarType = {\r\n    friends: Array<FriendsType>\r\n}\r\n\r\n\r\nconst initialState = {\r\n    friends: [\r\n        {id: 1, name: 'Dimych',},\r\n        {id: 2, name: 'Nasty',},\r\n        {id: 3, name: 'Vova',},\r\n    ] as FriendsType[]\r\n}\r\n\r\nexport type SidebarReducerInitialStateType = typeof initialState\r\n\r\ntype ActionsType = ReturnType<typeof sidebar>\r\n\r\nexport const sidebar = () => {\r\n    return {type: 'test'} as const\r\n}\r\n\r\nexport const sidebarReducer = (state: SidebarReducerInitialStateType = initialState, action: ActionsType): SidebarReducerInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {profileReducer} from './profile-reducer';\r\nimport {dialogsReducer} from './dialogs-reducer';\r\nimport {sidebarReducer} from './sidebar-reducer';\r\nimport {usersReducer} from './users-reducer';\r\nimport thunk from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport s from './Header.module.css';\n\nfunction Header() {\n  return (\n    <header className={s.header}>\n        <img src={logo} alt=\"\"/>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './../Dialogs.module.css';\n\ntype dialogItemType = {\n    name: string\n    id: number\n}\n\nconst DialogItem = (props: dialogItemType) => {\n    const path = `/dialogs/${props.id}`\n    return (\n        <div className={`${s.dialog}`}>\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\n        </div>)\n}\n\nexport default DialogItem;\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nexport type MessageItemType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageItemType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent} from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogsItem';\nimport Message from './Messages/Message';\nimport {DialogsPropsType} from './DialogsContainer';\n\n\nfunction Dialogs(props: DialogsPropsType) {\n\n    const state = props.dialogsPage\n\n    const dialogsElements = state.dialogs.map(dialogs => <DialogItem key={dialogs.id}\n                                                                           name={dialogs.name}\n                                                                           id={dialogs.id}/>)\n\n    const messagesElements = state.messages.map(message => <Message key={message.id}\n                                                                          message={message.message}/>)\n    const newMessageBody = state.newMessageBody\n\n\n    const onSendMessageClick = () => {\n        props.onSendMessage()\n    }\n    const onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n\n        const messageText = e.currentTarget.value;\n        props.updateNewMessageBody(messageText)\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n                <div>\n                    <textarea placeholder={'Enter your message'}\n                              value={newMessageBody}\n                              onChange={onNewMessageChange}/>\n                </div>\n                <div>\n                    <button onClick={onSendMessageClick}>Send message</button>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\n\nexport default Dialogs;\n","import {DialogsInitialStateType, sendMessageAC, updateNewMessageBodyAC} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsInitialStateType;\r\n}\r\ntype MapDispatchToPropsType = {\r\n    onSendMessage: () => void\r\n    updateNewMessageBody: (body: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        onSendMessage() {\r\n            dispatch(sendMessageAC())\r\n        },\r\n        updateNewMessageBody(body: string) {\r\n            dispatch(updateNewMessageBodyAC(body))\r\n\r\n        },\r\n    }\r\n}\r\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './Sidebar.module.css';\nimport {FriendsType, SidebarType} from '../../redux/sidebar-reducer';\nimport {SidebarPropsType} from './SidebarContainer';\n\n\nconst Sidebar: React.FC<SidebarPropsType> = (props) => {\n    return (\n        <aside className={s.sidebar}>\n            <nav >\n                <ul>\n                    <li><NavLink to={'/profile'} activeClassName={s.active}>Profile</NavLink></li>\n                    <li><NavLink to={'/dialogs'} activeClassName={s.active}>Messages</NavLink></li>\n                    <li><NavLink to={'/users'} activeClassName={s.active}>Users</NavLink></li>\n                </ul>\n            </nav>\n            <SidebarFriendsBlock friends={props.sidebar.friends}/>\n        </aside>\n    )\n}\n\nconst SidebarFriendsBlock: React.FC<SidebarType> = (props) => {\n\n    const friendItem = props.friends.map(friend => <Friend key={friend.id} id={friend.id} name={friend.name}/>)\n\n    return (\n        <div>\n            <h3>Friends</h3>\n            <div className={s.friendBlock}>\n                {friendItem}\n            </div>\n        </div>\n    )\n}\n\nconst Friend: React.FC<FriendsType> = (props) => {\n    return (\n        <div className={s.friend}>\n            <div className={s.imgProfilePhoto}/>\n            <p className={s.name}>{props.name}</p>\n        </div>\n    )\n}\n\nexport default Sidebar;\n","import Sidebar from './Sidebar';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport { SidebarType } from '../../redux/sidebar-reducer';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    sidebar: SidebarType\r\n}\r\ntype MapDispatchToPropsType = {}\r\n\r\nexport type SidebarPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        sidebar: state.sidebar\r\n    }\r\n}\r\nconst mapDispatchToProps = () => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport const SidebarContainer = connect(mapStateToProps, mapDispatchToProps)(Sidebar)","export default __webpack_public_path__ + \"static/media/userPhoto.b89021c6.png\";","import React from 'react';\r\nimport userPhoto from '../../assets/images/userPhoto.png'\r\nimport styles from './UsersContainer.module.css'\r\nimport {ResponseItemType} from './UsersContainer';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    users: ResponseItemType[]\r\n    totalCount: number,\r\n    pageSize: number\r\n    currentPage: number\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    onPageChanged: (page: number) => void\r\n}\r\n\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n\r\n        const UsersEl = props.users.map((u) => {\r\n            return (\r\n                <div key={u.id}>\r\n                    <div>\r\n                        <NavLink to={`profile/${u.id}`}><img src={u.photos.small !== null ? u.photos.small : userPhoto}\r\n                                      className={styles.userPhoto} alt={'Avatar'}/></NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {u.followed\r\n                            ? <button onClick={() => {\r\n                                props.unfollow(u.id)\r\n                            }}>Unfollow</button>\r\n                            : <button onClick={() => {\r\n                                props.follow(u.id)\r\n                            }}>Follow</button>}\r\n                    </div>\r\n                    <div>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </div>\r\n                    <div>\r\n                        <div>{'u.location.country'}</div>\r\n                        <div>{'u.location.city'}</div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n\r\n        // let pagesCount = Math.ceil(props.totalCount / props.pageSize)\r\n        const pages = []\r\n\r\n        for (let i = 1; i <= 30; i++) {\r\n            pages.push(i)\r\n        }\r\n\r\n        return <>\r\n\r\n            <div>\r\n                {pages.map(page => {\r\n                    return <span\r\n                        key={page}\r\n                        className={props.currentPage === page ? styles.selectedPage : ''}\r\n                        onClick={() => {\r\n                            props.onPageChanged(page)\r\n                        }}\r\n                    >{page} </span>\r\n                })}\r\n                {UsersEl}\r\n            </div>\r\n        </>\r\n    }","import React from 'react'\r\nimport styles from './Preloader.module.css'\r\n\r\n\r\n\r\nexport const Preloader = () => {\r\n    return <>\r\n            <div className={styles.ldsHourglass}/>\r\n    </>\r\n}","import React from 'react';\r\nimport axios from 'axios';\r\nimport {Users} from './Users';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    toggleIsFetching,\r\n    unfollow,\r\n    UsersInitialStatePropsType\r\n} from '../../redux/users-reducer';\r\nimport {Preloader} from '../common/Preloader/Preloader';\r\n\r\n\r\nexport type ResponseItemType = {\r\n    'name': string\r\n    'id': number\r\n    'uniqueUrlName': null | string\r\n    'photos': {\r\n        'small': null | string\r\n        'large': null | string\r\n    },\r\n    'status': null | string\r\n    'followed': boolean\r\n}\r\ntype ServerData = {\r\n    'items': ResponseItemType[]\r\n    'totalCount': number\r\n    'error': null | string\r\n}\r\ntype ResponseType = {\r\n    data: ServerData\r\n}\r\n\r\nexport class UsersContainerAPI extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true)\r\n        axios.get<ServerData>(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\r\n            .then((response: ResponseType) => {\r\n                this.props.toggleIsFetching(false)\r\n                this.props.setUsers(response.data.items)\r\n                this.props.setTotalUsersCount(response.data.totalCount)\r\n            })\r\n    }\r\n\r\n    onPageChanged = (page: number) => {\r\n        this.props.setCurrentPage(page)\r\n        this.props.toggleIsFetching(true)\r\n        axios.get<ServerData>(`https://social-network.samuraijs.com/api/1.0/users?page=${page}&count=${this.props.pageSize}`)\r\n            .then((response: ResponseType) => {\r\n                this.props.toggleIsFetching(false)\r\n                this.props.setUsers(response.data.items)\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching && <Preloader/>}\r\n            <Users users={this.props.users}\r\n                   currentPage={this.props.currentPage}\r\n                   pageSize={this.props.pageSize}\r\n                   totalCount={this.props.totalCount}\r\n                   onPageChanged={this.onPageChanged}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n            />\r\n        </>\r\n    }\r\n\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    users: UsersInitialStatePropsType[]\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalCount: state.usersPage.totalCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps2 = {\r\n    follow,\r\n    unfollow,\r\n    setUsers,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    toggleIsFetching,\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & typeof mapDispatchToProps2\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps2)(UsersContainerAPI)","import React from 'react';\r\nimport styles from './ProfileData.module.css'\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n}\r\nconst ProfileData = (props: PropsType) => {\r\n    const {profile} = props\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    debugger\r\n    return (\r\n        <div className={styles.profileData}>\r\n            <img src={profile.photos.small ? profile.photos.small : ''} alt=\"profile avatar\"/>\r\n            <div>\r\n                <h3>{profile.fullName}</h3>\r\n            </div>\r\n            <div>\r\n                <h3>About me:</h3>\r\n                <span>{profile.aboutMe}</span>\r\n            </div>\r\n            <div>\r\n                <h3>My contacts:</h3>\r\n                <ProfileContacts contacts={profile.contacts}/>\r\n            </div>\r\n            {profile.lookingForAJob && <div>\r\n                <h3>Ищу работу</h3>\r\n                {profile.lookingForAJobDescription}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData;\r\n\r\ntype ProfileContactsType = {\r\n    contacts: {\r\n        'facebook': string | null\r\n        'website': string | null\r\n        'vk': string | null\r\n        'twitter': string | null\r\n        'instagram': string | null\r\n        'youtube': string | null\r\n        'github': string | null\r\n        'mainLink': string | null\r\n    }\r\n}\r\n\r\nconst ProfileContacts = (props: ProfileContactsType) => {\r\n\r\n    const netWork = Object.keys(props.contacts)\r\n    const netWorkLinks = Object.values(props.contacts)\r\n\r\n    netWork.map(key => (<div>{key}</div>))\r\n\r\n    return (\r\n        <div className={styles.wrapperContacts}>\r\n\r\n            <div className={styles.contacts}>{netWork.map(key => {\r\n                return (\r\n                    <div>\r\n                        {key}\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n\r\n            <div className={styles.contacts}>{netWorkLinks.map(value => {\r\n                return (\r\n                    <div>\r\n                        {value ? value : 'Не заполнено'}\r\n                    </div>\r\n                )\r\n            })\r\n            }</div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\nimport {PostType} from '../../../../redux/profile-reducer';\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://d13ezvd6yrslxm.cloudfront.net/wp/wp-content/images/avatar-2-story.jpg\"\r\n                 alt=\"Logo with Profile\"/>\r\n            <p>{props.message}</p>\r\n            <p>Like {props.likesCount}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import {addPostActionCreator, PostType, updateNewPostTextAC} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    newPostText: string\r\n    posts: Array<PostType>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost() {\r\n            dispatch(addPostActionCreator())\r\n        },\r\n        updateNewPostText(text: string) {\r\n            dispatch(updateNewPostTextAC(text))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React, {ChangeEvent} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\n\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    const postsElements = props.posts.map(post =>\r\n        <Post\r\n            key={post.id}\r\n            id={post.id}\r\n            message={post.message}\r\n            likesCount={post.likesCount}/>)\r\n\r\n    const onAddPost = () => {\r\n        props.addPost()\r\n    }\r\n\r\n    const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        const text = e.currentTarget.value\r\n        props.updateNewPostText(text)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Posts</h3>\r\n            <div className={s.new_post}>\r\n                <div>\r\n                    <textarea value={props.newPostText} onChange={onPostChange}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileLogo from './ProfileLogo/ProfileLogo';\r\nimport ProfileData from './ProfileData/ProfileData';\r\nimport {MyPostsContainer} from './Posts/MyPostsContainer';\r\nimport {ProfilePropsType} from './ProfileContainer';\r\nimport {ProfileType} from '../../redux/profile-reducer';\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            {/*<ProfileLogo />*/}\r\n            <ProfileData profile={props.profile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\nimport axios from 'axios';\r\nimport Profile from './Profile';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {ProfileType, setUserProfile} from '../../redux/profile-reducer';\r\n\r\n\r\ntype ResponseType = {\r\n    data: ProfileType\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n\r\n    componentDidMount() {\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/profile/2`)\r\n            .then((response: ResponseType) => {\r\n                this.props.setUserProfile(response.data)\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props} profile={this.props.profile}/>\r\n    }\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile\r\n    }\r\n}\r\n\r\n\r\nconst connector = connect(mapStateToProps, {\r\n    setUserProfile\r\n});\r\n\r\nexport type ProfilePropsType = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(ProfileContainer);","import React from 'react';\r\nimport './App.css';\r\nimport Header from './Components/Header/Header';\r\nimport {BrowserRouter, Route} from 'react-router-dom';\r\nimport {DialogsContainer} from './Components/Dialogs/DialogsContainer';\r\nimport {SidebarContainer} from './Components/Sidebar/SidebarContainer';\r\nimport UsersContainer from './Components/Users/UsersContainer';\r\nimport ProfileContainer from './Components/Profile/ProfileContainer';\r\n\r\nconst App = () => {\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"app_wrapper\">\r\n                <Header/>\r\n                <SidebarContainer/>\r\n                <div className={'app_wrapper_content'}>\r\n                    <Route path=\"/profile\" render={() => <ProfileContainer/>}/>\r\n\r\n                    <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\r\n                    <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n                </div>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from './redux/redux-store';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\nexport const rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n\r\n        </React.StrictMode>, document.getElementById('root')\r\n    )\r\n}\r\n\r\nrerenderEntireTree()\r\n\r\nstore.subscribe(() => {\r\n    rerenderEntireTree()\r\n})\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}