{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Sidebar/Sidebar.module.css","Components/Profile/Posts/MyPosts.module.css","Components/Users/UsersContainer.module.css","Components/common/Preloader/Preloader.module.css","Components/Header/Header.module.css","Components/Profile/Profile.module.css","Components/Profile/ProfileLogo/ProfileLogo.module.css","Components/Profile/ProfileData/ProfileData.module.css","Components/Profile/Posts/Post/Post.module.css","redux/users-reducer.ts","reportWebVitals.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","Components/Header/logo.svg","Components/Header/Header.tsx","Components/Profile/ProfileLogo/ProfileLogo.tsx","Components/Profile/ProfileData/ProfileData.tsx","Components/Profile/Posts/Post/Post.tsx","Components/Profile/Posts/MyPostsContainer.tsx","Components/Profile/Posts/MyPosts.tsx","Components/Profile/Profile.tsx","Components/Dialogs/DialogItem/DialogsItem.tsx","Components/Dialogs/Messages/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Sidebar/Sidebar.tsx","Components/Sidebar/SidebarContainer.tsx","assets/images/userPhoto.png","Components/common/Preloader/Preloader.tsx","Components/Users/Users.tsx","Components/Users/UsersContainer.tsx","App.tsx","index.tsx"],"names":["module","exports","USERS_ACTIONS","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_POST","UPDATE_NEW_POST_TEXT","initialState","newPostText","posts","id","message","likesCount","SEND_MESSAGE","UPDATE_NEW_MESSAGE_BODY","newMessageBody","dialogs","name","messages","friends","users","pageSize","totalCount","currentPage","isFetching","rootReducer","combineReducers","profilePage","state","action","type","newPost","Date","getTime","trimmedText","newText","dialogsPage","newMessage","trim","body","sidebar","usersPage","FOLLOW","map","u","userID","followed","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","IS_FETCHING","store","createStore","Header","className","s","header","src","logo","alt","ProfileLogo","profile_logo","ProfileData","profileData","Post","props","item","MyPostsContainer","connect","dispatch","addPost","updateNewPostText","text","postsElements","post","postsBlock","new_post","value","onChange","e","currentTarget","onClick","Profile","profile","DialogItem","path","dialog","to","activeClassName","active","Message","Dialogs","dialogsElements","messagesElements","dialogsItems","placeholder","messageText","updateNewMessageBody","onSendMessage","DialogsContainer","SidebarFriendsBlock","friendItem","friend","friendBlock","Friend","imgProfilePhoto","Sidebar","SidebarContainer","Preloader","styles","wrapper","ldsHourglass","Users","UsersEl","photos","small","userPhoto","unfollow","follow","status","pages","i","push","page","selectedPage","onPageChanged","UsersContainerAPI","setCurrentPage","setIsFetching","axios","get","response","setUsers","data","items","this","setTotalUsersCount","React","Component","followAC","unfollowAC","setUsersTotalCountAC","setIsFetchingAC","App","render","UsersContainer","rerenderEntireTree","ReactDOM","StrictMode","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.0c42cfa6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__BRHD6\",\"dialogsItems\":\"Dialogs_dialogsItems__1aH1f\",\"dialog\":\"Dialogs_dialog__1glHE\",\"active\":\"Dialogs_active__3NWs5\",\"messanges\":\"Dialogs_messanges__WVkjx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__13B6p\",\"active\":\"Sidebar_active__2WsD6\",\"friendBlock\":\"Sidebar_friendBlock__2oXRU\",\"friend\":\"Sidebar_friend__3Y_SH\",\"name\":\"Sidebar_name__2Hl5y\",\"imgProfilePhoto\":\"Sidebar_imgProfilePhoto__1UA-e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1qs7u\",\"posts\":\"MyPosts_posts__tbkbY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"UsersContainer_userPhoto__1HjXU\",\"selectedPage\":\"UsersContainer_selectedPage__2syrM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__3XCPk\",\"ldsHourglass\":\"Preloader_ldsHourglass__pzUo-\",\"lds-hourglass\":\"Preloader_lds-hourglass__1hkv0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2x0-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__CiwxZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile_logo\":\"ProfileLogo_profile_logo__1nkul\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileData\":\"ProfileData_profileData__3_er9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2q3Eb\"};","export enum USERS_ACTIONS {\r\n    FOLLOW = 'FOLLOW',\r\n    UNFOLLOW = 'UNFOLLOW',\r\n    SET_USERS = 'SET_USERS',\r\n    SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',\r\n    SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT',\r\n    IS_FETCHING = 'IS_FETCHING',\r\n}\r\n\r\n\r\nexport type UsersInitialStatePropsType = {\r\n    'name': string\r\n    'id': number\r\n    'uniqueUrlName': string | null\r\n    'photos': {\r\n        'small': string | null\r\n        'large': string | null\r\n    },\r\n    'status': string | null\r\n    'followed': boolean\r\n}\r\n\r\nconst initialState = {\r\n    users: [] as UsersInitialStatePropsType[],\r\n    pageSize: 10,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n}\r\n\r\nexport const usersReducer = (state: UsersInitialStateType = initialState, action: ActionsType): UsersInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case USERS_ACTIONS.FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case USERS_ACTIONS.UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case USERS_ACTIONS.SET_USERS:\r\n            return {...state, users: [...action.users]}\r\n        case USERS_ACTIONS.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case USERS_ACTIONS.SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalCount: action.totalCount}\r\n        case USERS_ACTIONS.IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport type UsersInitialStateType = typeof initialState\r\n\r\n\r\ntype ActionsType = ReturnType<typeof followAC>\r\n    | ReturnType<typeof unfollowAC>\r\n    | ReturnType<typeof setUsersAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setUsersTotalCountAC>\r\n    | ReturnType<typeof setIsFetchingAC>\r\n\r\nexport const followAC = (userID: number) => {\r\n    return {type: USERS_ACTIONS.FOLLOW, userID} as const\r\n}\r\nexport const unfollowAC = (userID: number) => {\r\n    return {type: USERS_ACTIONS.UNFOLLOW, userID} as const\r\n}\r\nexport const setUsersAC = (users: UsersInitialStatePropsType[]) => {\r\n    return {type: USERS_ACTIONS.SET_USERS, users} as const\r\n}\r\nexport const setCurrentPageAC = (currentPage: number) => {\r\n    return {type: USERS_ACTIONS.SET_CURRENT_PAGE, currentPage} as const\r\n}\r\nexport const setUsersTotalCountAC = (totalCount: number) => {\r\n    return {type: USERS_ACTIONS.SET_TOTAL_USERS_COUNT, totalCount} as const\r\n}\r\nexport const setIsFetchingAC = (isFetching: boolean) => {\r\n    return {type: USERS_ACTIONS.IS_FETCHING, isFetching} as const\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const ADD_POST = 'ADD-POST'\r\nexport const UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT'\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nconst initialState = {\r\n    newPostText: '',\r\n    posts: [\r\n        {\r\n            id: 1,\r\n            message: 'Good this site',\r\n            likesCount: 10\r\n        },\r\n        {\r\n            id: 1,\r\n            message: 'Good this site',\r\n            likesCount: 10\r\n        }\r\n    ] as PostType[],\r\n}\r\n\r\nexport type ProfileReducerInitialStateType = typeof initialState\r\n\r\n\r\ntype ActionsType = ReturnType<typeof addPostActionCreator> | ReturnType<typeof updateNewPostTextAC>\r\n\r\nexport const addPostActionCreator = () => {\r\n    return {type: ADD_POST} as const\r\n}\r\nexport const updateNewPostTextAC = (postText: string) => {\r\n    return {type: UPDATE_NEW_POST_TEXT, newText: postText} as const\r\n}\r\n\r\nexport const profileReducer = (state: ProfileReducerInitialStateType = initialState, action: ActionsType): ProfileReducerInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            }\r\n            const trimmedText = newPost.message\r\n            if (trimmedText) {\r\n                return {\r\n                    ...state,\r\n                    posts: [...state.posts, newPost],\r\n                    newPostText: ''\r\n                }\r\n            }\r\n\r\n            return state\r\n        case UPDATE_NEW_POST_TEXT:\r\n            return {...state, newPostText: action.newText}\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}","\r\nexport const SEND_MESSAGE = 'SEND-MESSAGE'\r\nexport const UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_DIALOG_MESSAGE'\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\n\r\ntype DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst initialState = {\r\n    newMessageBody: '',\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych',},\r\n        {id: 2, name: 'Nasty',},\r\n        {id: 3, name: 'Vova',},\r\n        {id: 4, name: 'Viktor',},\r\n        {id: 5, name: 'Olya',},\r\n    ] as DialogsType[],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'Dimych'},\r\n    ] as MessageType[]\r\n}\r\n\r\nexport type DialogsInitialStateType = typeof initialState\r\n\r\n/*export type AddMessageActionType = ReturnType<typeof sendMessageAC>\r\nexport type UpdateNewDialogMessageActionType = ReturnType<typeof updateNewMessageBodyAC>*/\r\n\r\ntype ActionsType = ReturnType<typeof sendMessageAC> | ReturnType<typeof updateNewMessageBodyAC>\r\n\r\nexport const sendMessageAC = () => {\r\n    return {type: SEND_MESSAGE} as const\r\n}\r\nexport const updateNewMessageBodyAC = (messageText: string) => {\r\n    return {type: UPDATE_NEW_MESSAGE_BODY, body: messageText} as const\r\n}\r\n\r\nexport const dialogsReducer = (state: DialogsInitialStateType = initialState, action: ActionsType): DialogsInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            const newMessage: MessageType = {\r\n                id: new Date().getTime(),\r\n                message: state.newMessageBody,\r\n            }\r\n            const trimmedText = state.newMessageBody.trim()\r\n            if (trimmedText) {\r\n                return {\r\n                    ...state,\r\n                    messages: [...state.messages, newMessage],\r\n                    newMessageBody: ''\r\n                }\r\n            }\r\n            return state\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            return {...state, newMessageBody: action.body}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","export type FriendsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type SidebarType = {\r\n    friends: Array<FriendsType>\r\n}\r\n\r\n\r\nconst initialState = {\r\n    friends: [\r\n        {id: 1, name: 'Dimych',},\r\n        {id: 2, name: 'Nasty',},\r\n        {id: 3, name: 'Vova',},\r\n    ] as FriendsType[]\r\n}\r\n\r\nexport type SidebarReducerInitialStateType = typeof initialState\r\n\r\ntype ActionsType = ReturnType<typeof sidebar>\r\n\r\nexport const sidebar = () => {\r\n    return {type: 'test'} as const\r\n}\r\n\r\nexport const sidebarReducer = (state: SidebarReducerInitialStateType = initialState, action: ActionsType): SidebarReducerInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers, createStore} from 'redux';\r\nimport {profileReducer} from './profile-reducer';\r\nimport {dialogsReducer} from './dialogs-reducer';\r\nimport {sidebarReducer} from './sidebar-reducer';\r\nimport {usersReducer} from './users-reducer';\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore(rootReducer)","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport s from './Header.module.css';\n\nfunction Header() {\n  return (\n    <header className={s.header}>\n        <img src={logo} alt=\"\"/>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport s from './ProfileLogo.module.css';\n\nfunction ProfileLogo() {\n    return (\n        <div className={s.profile_logo}/>\n)\n}\n\nexport default ProfileLogo;\n","import React from \"react\";\r\nimport s from \"./ProfileData.module.css\"\r\n\r\nconst ProfileData = () => {\r\n    return (\r\n        <div className={s.profileData}>\r\n            <img src=\"https://d13ezvd6yrslxm.cloudfront.net/wp/wp-content/images/avatar-2-story.jpg\" alt=\"profile avatar\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData;","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\nimport {PostType} from '../../../../redux/profile-reducer';\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://d13ezvd6yrslxm.cloudfront.net/wp/wp-content/images/avatar-2-story.jpg\"\r\n                 alt=\"Logo with Profile\"/>\r\n            <p>{props.message}</p>\r\n            <p>Like {props.likesCount}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import {addPostActionCreator, PostType, updateNewPostTextAC} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    newPostText: string\r\n    posts: Array<PostType>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost() {\r\n            dispatch(addPostActionCreator())\r\n        },\r\n        updateNewPostText(text: string) {\r\n            dispatch(updateNewPostTextAC(text))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React, {ChangeEvent} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\n\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    const postsElements = props.posts.map(post =>\r\n        <Post\r\n            key={post.id}\r\n            id={post.id}\r\n            message={post.message}\r\n            likesCount={post.likesCount}/>)\r\n\r\n    const onAddPost = () => {\r\n        props.addPost()\r\n    }\r\n\r\n    const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        const text = e.currentTarget.value\r\n        props.updateNewPostText(text)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Posts</h3>\r\n            <div className={s.new_post}>\r\n                <div>\r\n                    <textarea value={props.newPostText} onChange={onPostChange}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileLogo from './ProfileLogo/ProfileLogo';\r\nimport ProfileData from './ProfileData/ProfileData';\r\nimport {MyPostsContainer} from './Posts/MyPostsContainer';\r\nimport {AppStateType} from '../../redux/redux-store';\r\n\r\nexport type PropsType = {\r\n    store: AppStateType\r\n}\r\n\r\nfunction Profile() {\r\n\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileLogo />\r\n            <ProfileData />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './../Dialogs.module.css';\n\ntype dialogItemType = {\n    name: string\n    id: number\n}\n\nconst DialogItem = (props: dialogItemType) => {\n    const path = `/dialogs/${props.id}`\n    return (\n        <div className={`${s.dialog}`}>\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\n        </div>)\n}\n\nexport default DialogItem;\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nexport type MessageItemType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageItemType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent} from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogsItem';\nimport Message from './Messages/Message';\nimport {DialogsPropsType} from './DialogsContainer';\n\n\nfunction Dialogs(props: DialogsPropsType) {\n\n    const state = props.dialogsPage\n\n    const dialogsElements = state.dialogs.map(dialogs => <DialogItem key={dialogs.id}\n                                                                           name={dialogs.name}\n                                                                           id={dialogs.id}/>)\n\n    const messagesElements = state.messages.map(message => <Message key={message.id}\n                                                                          message={message.message}/>)\n    const newMessageBody = state.newMessageBody\n\n\n    const onSendMessageClick = () => {\n        props.onSendMessage()\n    }\n    const onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n\n        const messageText = e.currentTarget.value;\n        props.updateNewMessageBody(messageText)\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n                <div>\n                    <textarea placeholder={'Enter your message'}\n                              value={newMessageBody}\n                              onChange={onNewMessageChange}/>\n                </div>\n                <div>\n                    <button onClick={onSendMessageClick}>Send message</button>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\n\nexport default Dialogs;\n","import {DialogsInitialStateType, sendMessageAC, updateNewMessageBodyAC} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsInitialStateType;\r\n}\r\ntype MapDispatchToPropsType = {\r\n    onSendMessage: () => void\r\n    updateNewMessageBody: (body: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        onSendMessage() {\r\n            dispatch(sendMessageAC())\r\n        },\r\n        updateNewMessageBody(body: string) {\r\n            dispatch(updateNewMessageBodyAC(body))\r\n\r\n        },\r\n    }\r\n}\r\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './Sidebar.module.css';\nimport {FriendsType, SidebarType} from '../../redux/sidebar-reducer';\nimport {SidebarPropsType} from './SidebarContainer';\n\n\nconst Sidebar: React.FC<SidebarPropsType> = (props) => {\n    return (\n        <aside className={s.sidebar}>\n            <nav >\n                <ul>\n                    <li><NavLink to={'/profile'} activeClassName={s.active}>Profile</NavLink></li>\n                    <li><NavLink to={'/dialogs'} activeClassName={s.active}>Messages</NavLink></li>\n                    <li><NavLink to={'/users'} activeClassName={s.active}>Users</NavLink></li>\n                </ul>\n            </nav>\n            <SidebarFriendsBlock friends={props.sidebar.friends}/>\n        </aside>\n    )\n}\n\nconst SidebarFriendsBlock: React.FC<SidebarType> = (props) => {\n\n    const friendItem = props.friends.map(friend => <Friend key={friend.id} id={friend.id} name={friend.name}/>)\n\n    return (\n        <div>\n            <h3>Friends</h3>\n            <div className={s.friendBlock}>\n                {friendItem}\n            </div>\n        </div>\n    )\n}\n\nconst Friend: React.FC<FriendsType> = (props) => {\n    return (\n        <div className={s.friend}>\n            <div className={s.imgProfilePhoto}/>\n            <p className={s.name}>{props.name}</p>\n        </div>\n    )\n}\n\nexport default Sidebar;\n","import Sidebar from './Sidebar';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport { SidebarType } from '../../redux/sidebar-reducer';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    sidebar: SidebarType\r\n}\r\ntype MapDispatchToPropsType = {}\r\n\r\nexport type SidebarPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        sidebar: state.sidebar\r\n    }\r\n}\r\nconst mapDispatchToProps = () => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport const SidebarContainer = connect(mapStateToProps, mapDispatchToProps)(Sidebar)","export default __webpack_public_path__ + \"static/media/userPhoto.b89021c6.png\";","import React from 'react'\r\nimport styles from './Preloader.module.css'\r\n\r\n\r\n\r\nexport const Preloader = () => {\r\n    return <>\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.ldsHourglass}/>\r\n        </div>\r\n    </>\r\n}","import React from 'react';\r\nimport userPhoto from '../../assets/images/userPhoto.png'\r\nimport styles from './UsersContainer.module.css'\r\nimport {ResponseItemType} from './UsersContainer';\r\nimport {Preloader} from '../common/Preloader/Preloader';\r\n\r\ntype PropsType = {\r\n    users: ResponseItemType[]\r\n    totalCount: number,\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    onPageChanged: (page: number) => void\r\n}\r\n\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n\r\n        const UsersEl = props.users.map((u) => {\r\n            return (\r\n                <div key={u.id}>\r\n                    <div>\r\n                        <img src={u.photos.small !== null ? u.photos.small : userPhoto}\r\n                             className={styles.userPhoto} alt={'Avatar'}/>\r\n                    </div>\r\n                    <div>\r\n                        {u.followed\r\n                            ? <button onClick={() => {\r\n                                props.unfollow(u.id)\r\n                            }}>Unfollow</button>\r\n                            : <button onClick={() => {\r\n                                props.follow(u.id)\r\n                            }}>Follow</button>}\r\n                    </div>\r\n                    <div>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </div>\r\n                    <div>\r\n                        <div>{'u.location.country'}</div>\r\n                        <div>{'u.location.city'}</div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n\r\n        // let pagesCount = Math.ceil(props.totalCount / props.pageSize)\r\n        const pages = []\r\n\r\n        for (let i = 1; i <= 30; i++) {\r\n            pages.push(i)\r\n        }\r\n\r\n        return <>\r\n            {props.isFetching && <Preloader/>}\r\n            <div>\r\n                {pages.map(page => {\r\n                    return <span\r\n                        className={props.currentPage === page ? styles.selectedPage : ''}\r\n                        onClick={() => {\r\n                            props.onPageChanged(page)\r\n                        }}\r\n                    >{page} </span>\r\n                })}\r\n                {UsersEl}\r\n            </div>\r\n        </>\r\n    }","import React from 'react';\r\nimport axios from 'axios';\r\nimport {Users} from './Users';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\nimport {\r\n    followAC,\r\n    setCurrentPageAC, setIsFetchingAC,\r\n    setUsersAC,\r\n    setUsersTotalCountAC,\r\n    unfollowAC,\r\n    UsersInitialStatePropsType\r\n} from '../../redux/users-reducer';\r\n\r\n\r\nexport type ResponseItemType = {\r\n    'name': string\r\n    'id': number\r\n    'uniqueUrlName': null | string\r\n    'photos': {\r\n        'small': null | string\r\n        'large': null | string\r\n    },\r\n    'status': null | string\r\n    'followed': boolean\r\n}\r\ntype ServerData = {\r\n    'items': ResponseItemType[]\r\n    'totalCount': number\r\n    'error': null | string\r\n}\r\ntype ResponseType = {\r\n    data: ServerData\r\n}\r\n\r\nexport class UsersContainerAPI extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.setIsFetching(true)\r\n        axios.get<ServerData>(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\r\n            .then((response: ResponseType) => {\r\n                this.props.setIsFetching(false)\r\n                this.props.setUsers(response.data.items)\r\n                this.props.setTotalUsersCount(response.data.totalCount)\r\n            })\r\n    }\r\n\r\n    onPageChanged = (page: number) => {\r\n        this.props.setCurrentPage(page)\r\n        this.props.setIsFetching(true)\r\n        axios.get<ServerData>(`https://social-network.samuraijs.com/api/1.0/users?page=${page}&count=${this.props.pageSize}`)\r\n            .then((response: ResponseType) => {\r\n                this.props.setIsFetching(false)\r\n                this.props.setUsers(response.data.items)\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return <Users users={this.props.users}\r\n                      currentPage={this.props.currentPage}\r\n                      pageSize={this.props.pageSize}\r\n                      totalCount={this.props.totalCount}\r\n                      onPageChanged={this.onPageChanged}\r\n                      follow={this.props.follow}\r\n                      unfollow={this.props.unfollow}\r\n                      isFetching={this.props.isFetching}\r\n        />\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    users: UsersInitialStatePropsType[]\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalCount: state.usersPage.totalCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n    }\r\n}\r\ntype MapDispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (state: UsersInitialStatePropsType[]) => void\r\n    setCurrentPage: (page: number) => void\r\n    setTotalUsersCount: (page: number) => void\r\n    setIsFetching: (isFetching: boolean) => void\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        follow(userID: number) {\r\n            dispatch(followAC(userID))\r\n        },\r\n        unfollow(userID: number) {\r\n            dispatch(unfollowAC(userID))\r\n        },\r\n        setUsers(state: UsersInitialStatePropsType[]) {\r\n            dispatch(setUsersAC(state))\r\n        },\r\n        setCurrentPage(page: number) {\r\n            dispatch(setCurrentPageAC(page))\r\n        },\r\n        setTotalUsersCount(totalCount: number) {\r\n            dispatch(setUsersTotalCountAC(totalCount))\r\n        },\r\n        setIsFetching(isFetching: boolean) {\r\n            dispatch(setIsFetchingAC(isFetching))\r\n        },\r\n    }\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersContainerAPI)","import React from 'react';\r\nimport './App.css';\r\nimport Header from './Components/Header/Header';\r\nimport Profile from './Components/Profile/Profile';\r\nimport {HashRouter, Route} from 'react-router-dom';\r\nimport {DialogsContainer} from './Components/Dialogs/DialogsContainer';\r\nimport {SidebarContainer} from './Components/Sidebar/SidebarContainer';\r\nimport UsersContainer from './Components/Users/UsersContainer';\r\n\r\nconst App = () => {\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"app_wrapper\">\r\n                <Header/>\r\n                <SidebarContainer/>\r\n                <div className={'app_wrapper_content'}>\r\n                    <Route path=\"/profile\" render={() => <Profile/>}/>\r\n\r\n                    <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\r\n                    <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n                </div>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from './redux/redux-store';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\nexport const rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n\r\n        </React.StrictMode>, document.getElementById('root')\r\n    )\r\n}\r\n\r\nrerenderEntireTree()\r\n\r\nstore.subscribe(() => {\r\n    rerenderEntireTree()\r\n})\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}