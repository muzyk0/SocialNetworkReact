{"version":3,"sources":["Components/common/Preloader/Preloader.module.css","Components/Profile/Profile.module.css","Components/Profile/Posts/Post/Post.module.css","Components/Dialogs/Dialogs.module.css","Components/Sidebar/Sidebar.module.css","redux/profile-reducer.ts","reportWebVitals.ts","API/api.ts","redux/users-reducer.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/store.ts","Components/Dialogs/DialogItem/DialogsItem.tsx","Components/Dialogs/Messages/Message.tsx","utils/validators/validators.ts","Components/common/FormsControls/FormsControls.tsx","Components/Dialogs/AddMessageForm.tsx","Components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Sidebar/Sidebar.tsx","Components/Sidebar/SidebarContainer.tsx","assets/images/userPhoto.png","Components/Users/Users.tsx","Components/common/Preloader/Preloader.tsx","Components/Users/UsersContainer.tsx","Components/common/EditableSpan/EditableSpan.tsx","Components/Profile/ProfileData/ProfileData.tsx","Components/Profile/Posts/Post/Post.tsx","Components/Profile/Posts/AddNewPostForm.tsx","Components/Profile/Posts/MyPostsContainer.tsx","Components/Profile/Posts/MyPosts.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","Components/Header/logo.svg","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/LoginPage.tsx","App.tsx","index.tsx","Components/common/FormsControls/FormsControls.module.css","Components/Profile/ProfileData/ProfileData.module.css","Components/Profile/Posts/MyPosts.module.css","Components/Users/UsersContainer.module.css","Components/Header/Header.module.css"],"names":["module","exports","PROFILE_ACTION_TYPE","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","get","response","data","id","post","delete","profileAPI","userId","status","put","authAPI","email","password","rememberMe","USERS_ACTIONS","initialState","posts","message","likesCount","profile","setStatus","type","SET_STATUS","SEND_MESSAGE","dialogs","name","messages","friends","users","totalCount","isFetching","followingInProgress","toggleIsFetching","TOGGLE_IS_FETCHING","toggleFollowingProgress","isFollow","TOGGLE_IS_FOLLOWING_IN_PROGRESS","login","isAuth","error","setAuthUserData","SET_USER_DATA","payload","getAuthUserData","dispatch","a","resultCode","Error","initialized","rootReducer","combineReducers","profilePage","state","action","ADD_POST","newPost","Date","getTime","newPostText","SET_USER_PROFILE","dialogsPage","newMessage","value","trimmedText","trim","sidebar","usersPage","FOLLOW","map","u","userID","followed","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","filter","auth","SET_AUTH_ERROR","app","form","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","DialogItem","props","path","className","s","dialog","to","activeClassName","active","Message","required","maxLength","max","length","FormControl","meta","children","hasError","touched","styles","formControl","Textarea","input","Input","maxLength100","AddMessageFormRedux","reduxForm","onSubmit","handleSubmit","Field","component","placeHolder","validate","Dialogs","dialogsElements","messagesElements","dialogsItems","formData","onSendMessage","newMessageBody","mapStateToPropsForRedirect","withAuthRedirect","Component","connect","restProps","compose","sendMessageAC","SidebarFriendsBlock","friendItem","friend","friendBlock","Friend","imgProfilePhoto","Sidebar","SidebarContainer","Users","UsersEl","src","photos","small","userPhoto","alt","disabled","some","onClick","unfollow","follow","pages","i","push","page","selectedPage","onPageChanged","Preloader","ldsHourglass","UsersContainerAPI","getUsers","setCurrentPage","onFollow","onUnFollow","this","React","connector","items","EditableSpan","editMode","title","activateEditMode","setState","DeactivateEditMode","onChange","e","currentTarget","prevProps","prevState","snapshot","onDoubleClick","onBlur","autoFocus","ProfileData","profileData","defaultUserPhoto","fullName","updateStatus","aboutMe","contacts","lookingForAJob","lookingForAJobDescription","ProfileContacts","netWork","Object","keys","netWorkLinks","values","key","wrapperContacts","Post","item","maxLength10","NewPostReduxForm","MyPostsContainer","addPost","addPostActionCreator","postsElements","postsBlock","new_post","pastText","Profile","ProfileContainer","match","params","authorizedUserId","toString","getUserProfile","getStatus","withRouter","Header","header","logo","loginBlock","logout","HeaderContainer","LoginReduxForm","placeholder","formSummaryError","stopSubmit","_error","App","initializeApp","render","DialogsContainer","UsersContainer","promise","Promise","all","INITIALIZED_SUCCESS","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d6581e92.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__3XCPk\",\"ldsHourglass\":\"Preloader_ldsHourglass__pzUo-\",\"lds-hourglass\":\"Preloader_lds-hourglass__1hkv0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__CiwxZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2q3Eb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__BRHD6\",\"dialogsItems\":\"Dialogs_dialogsItems__1aH1f\",\"dialog\":\"Dialogs_dialog__1glHE\",\"active\":\"Dialogs_active__3NWs5\",\"messanges\":\"Dialogs_messanges__WVkjx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__13B6p\",\"active\":\"Sidebar_active__2WsD6\",\"friendBlock\":\"Sidebar_friendBlock__2oXRU\",\"friend\":\"Sidebar_friend__3Y_SH\",\"name\":\"Sidebar_name__2Hl5y\",\"imgProfilePhoto\":\"Sidebar_imgProfilePhoto__1UA-e\"};","import {profileAPI} from '../API/api';\r\nimport {AppThunkType} from './store';\r\n\r\nexport enum PROFILE_ACTION_TYPE {\r\n    ADD_POST = 'APP/PROFILE/ADD-POST',\r\n    SET_USER_PROFILE = 'APP/PROFILE/SET_PROFILE_INFO-NEW-POST-TEXT',\r\n    SET_STATUS = 'APP/PROFILE/SET_STATUS',\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfileType = {\r\n    'aboutMe': string | null\r\n    'contacts': {\r\n        'facebook': string | null\r\n        'website': string | null\r\n        'vk': string | null\r\n        'twitter': string | null\r\n        'instagram': string | null\r\n        'youtube': string | null\r\n        'github': string | null\r\n        'mainLink': string | null\r\n    },\r\n    'lookingForAJob': string | null\r\n    'lookingForAJobDescription': string | null\r\n    'fullName': string | null\r\n    'userId': number\r\n    'photos': {\r\n        'small': string | null\r\n        'large': string | null\r\n    }\r\n}\r\nlet initialState = {\r\n    posts: [\r\n        {\r\n            id: 1,\r\n            message: 'Good this site',\r\n            likesCount: 10\r\n        },\r\n        {\r\n            id: 2,\r\n            message: 'Good this site',\r\n            likesCount: 10\r\n        }\r\n    ] as PostType[],\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n}\r\n\r\nexport type ProfileReducerInitialStateType = typeof initialState\r\n\r\n\r\nexport const profileReducer = (state: ProfileReducerInitialStateType = initialState, action: profileActionsType): ProfileReducerInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case PROFILE_ACTION_TYPE.ADD_POST:\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n\r\n\r\n        case PROFILE_ACTION_TYPE.SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case PROFILE_ACTION_TYPE.SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport type profileActionsType = ReturnType<typeof addPostActionCreator>\r\n\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n\r\n// Action Creators\r\nexport const addPostActionCreator = (newPostText: string) => {\r\n    return {type: PROFILE_ACTION_TYPE.ADD_POST, newPostText} as const\r\n}\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {type: PROFILE_ACTION_TYPE.SET_USER_PROFILE, profile} as const\r\n}\r\nexport const setStatus = (status: string) => {\r\n    return {type: PROFILE_ACTION_TYPE.SET_STATUS, status} as const\r\n}\r\n\r\n// Thunk Creator\r\nexport const getUserProfile = (userId: string): AppThunkType => async dispatch => {\r\n    try {\r\n        const response = await profileAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response.data))\r\n    } catch (e) {\r\n        throw new Error()\r\n    }\r\n}\r\nexport const getStatus = (userId: string): AppThunkType => async dispatch => {\r\n    try {\r\n        const response = await profileAPI.getStatus(userId)\r\n        dispatch(setStatus(response.data))\r\n    } catch (e) {\r\n        throw new Error()\r\n    }\r\n}\r\nexport const updateStatus = (status: string): AppThunkType => async dispatch => {\r\n    try {\r\n        const response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    } catch (e) {\r\n        throw new Error()\r\n    }\r\n}\r\n\r\n\r\n// const handlers = {\r\n//     [LOADING]: (state) => {\r\n//         return {...state, isLoading: true}\r\n//     },\r\n//     DEFAULT: (state) => state,\r\n// }\r\n//\r\n// export const userReducer = (state, action) => {\r\n//     const handler = handlers[action.type] || handlers.DEFAULT\r\n//     return handler(state, action)\r\n// }","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\r\nimport {ProfileType} from '../redux/profile-reducer';\r\n\r\nexport type ResponseItemType = {\r\n    'name': string\r\n    'id': number\r\n    'uniqueUrlName': null | string\r\n    'photos': {\r\n        'small': null | string\r\n        'large': null | string\r\n    },\r\n    'status': null | string\r\n    'followed': boolean\r\n}\r\nexport type ServerData = {\r\n    'items': ResponseItemType[]\r\n    'totalCount': number\r\n    'error': null | string\r\n}\r\ntype ResponseType = {\r\n    data: ServerData\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '458be47a-15a2-43bc-bb9e-a21974e6a059'\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers: (currentPage: number = 1, pageSize: number = 10) => {\r\n        return instance.get<ServerData>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then((response: ResponseType) => response.data)\r\n    },\r\n    follow: (id: number = 2) => {\r\n        return instance.post(`follow/${id}`)\r\n            .then((response) => response.data)\r\n    },\r\n    unfollow: (id: number = 2) => {\r\n        return instance.delete(`follow/${id}`)\r\n            .then((response) => response.data)\r\n    },\r\n}\r\n\r\n\r\nexport const profileAPI = {\r\n    getProfile: (userId: string) => {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n    },\r\n    getStatus: (userId: string) => {\r\n        return instance.get<string>(`/profile/status/${userId}`)\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return instance.put(`/profile/status/`, {\r\n            status: status\r\n        })\r\n    }\r\n}\r\n\r\n\r\ntype AuthResponseType = {\r\n    data: {\r\n        id: number\r\n        login: string\r\n        email: string\r\n    }\r\n    'messages': string[]\r\n    'fieldsErrors': [],\r\n    'resultCode': number\r\n}\r\n\r\nexport const authAPI = {\r\n    me: () => {\r\n        return instance.get<AuthResponseType>(`auth/me`)\r\n    },\r\n    login: (email: string, password: string, rememberMe: boolean = false,) => {\r\n        return instance.post<AuthResponseType>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n        })\r\n    },\r\n    logout: () => {\r\n        return instance.delete(`auth/login`)\r\n    },\r\n}","import {Dispatch} from 'redux';\r\nimport {usersAPI} from '../API/api';\r\n\r\nexport enum USERS_ACTIONS {\r\n    FOLLOW = 'FOLLOW',\r\n    UNFOLLOW = 'UNFOLLOW',\r\n    SET_USERS = 'SET_USERS',\r\n    SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',\r\n    SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT',\r\n    TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING',\r\n    TOGGLE_IS_FOLLOWING_IN_PROGRESS = 'TOGGLE_IS_FOLLOWING_IN_PROGRESS',\r\n}\r\n\r\n\r\nexport type UsersInitialStatePropsType = {\r\n    'name': string\r\n    'id': number\r\n    'uniqueUrlName': string | null\r\n    'photos': {\r\n        'small': string | null\r\n        'large': string | null\r\n    },\r\n    'status': string | null\r\n    'followed': boolean\r\n}\r\n\r\nexport type UsersInitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    users: [] as UsersInitialStatePropsType[],\r\n    pageSize: 10,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as number[]\r\n}\r\n\r\nexport const usersReducer = (state: UsersInitialStateType = initialState, action: ActionsType): UsersInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case USERS_ACTIONS.FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case USERS_ACTIONS.UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case USERS_ACTIONS.SET_USERS:\r\n            return {...state, users: [...action.users]}\r\n        case USERS_ACTIONS.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case USERS_ACTIONS.SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalCount: action.totalCount}\r\n        case USERS_ACTIONS.TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case USERS_ACTIONS.TOGGLE_IS_FOLLOWING_IN_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFollow\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : [...state.followingInProgress.filter(id => id !== action.userId)]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport type ActionsType = ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\n\r\n// Action Creators\r\nexport const followSuccess = (userID: number) => {\r\n    return {type: USERS_ACTIONS.FOLLOW, userID} as const\r\n}\r\nexport const unfollowSuccess = (userID: number) => {\r\n    return {type: USERS_ACTIONS.UNFOLLOW, userID} as const\r\n}\r\nexport const setUsers = (users: UsersInitialStatePropsType[]) => {\r\n    return {type: USERS_ACTIONS.SET_USERS, users} as const\r\n}\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {type: USERS_ACTIONS.SET_CURRENT_PAGE, currentPage} as const\r\n}\r\nexport const setTotalUsersCount = (totalCount: number) => {\r\n    return {type: USERS_ACTIONS.SET_TOTAL_USERS_COUNT, totalCount} as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {type: USERS_ACTIONS.TOGGLE_IS_FETCHING, isFetching} as const\r\n}\r\nexport const toggleFollowingProgress = (isFollow: boolean, userId: number) => {\r\n    return {type: USERS_ACTIONS.TOGGLE_IS_FOLLOWING_IN_PROGRESS, isFollow, userId} as const\r\n}\r\n\r\n// Thunk Creator\r\nexport const getUsers = (currentPage: number, pageSize: number) => (dispatch: Dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    usersAPI.getUsers(currentPage, pageSize)\r\n        .then((data) => {\r\n            dispatch(toggleIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        })\r\n}\r\nexport const follow = (userId: number) => (dispatch: Dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    usersAPI.follow(userId)\r\n        .then((data) => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(followSuccess(userId))\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            }\r\n        })\r\n}\r\nexport const unfollow = (userId: number) => (dispatch: Dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    usersAPI.unfollow(userId)\r\n        .then((data) => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(unfollowSuccess(userId))\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            }\r\n        })\r\n}","export const SEND_MESSAGE = 'SEND-MESSAGE'\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\ntype DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych',},\r\n        {id: 2, name: 'Nasty',},\r\n        {id: 3, name: 'Vova',},\r\n        {id: 4, name: 'Viktor',},\r\n        {id: 5, name: 'Olya',},\r\n    ] as DialogsType[],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'Dimych'},\r\n    ] as MessageType[]\r\n}\r\n\r\nexport type DialogsInitialStateType = typeof initialState\r\n\r\n/*export type AddMessageActionType = ReturnType<typeof sendMessageAC>\r\nexport type UpdateNewDialogMessageActionType = ReturnType<typeof updateNewMessageBodyAC>*/\r\nexport const dialogsReducer = (state: DialogsInitialStateType = initialState, action: dialogsActionsType): DialogsInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            const newMessage: MessageType = {\r\n                id: new Date().getTime(),\r\n                message: action.value,\r\n            }\r\n            const trimmedText = action.value.trim()\r\n            if (trimmedText) {\r\n                return {\r\n                    ...state,\r\n                    messages: [...state.messages, newMessage],\r\n                }\r\n            }\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport type dialogsActionsType = ReturnType<typeof sendMessageAC>\r\n\r\nexport const sendMessageAC = (value: string) => {\r\n    return {type: SEND_MESSAGE, value} as const\r\n}\r\n","export type FriendsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type SidebarType = {\r\n    friends: Array<FriendsType>\r\n}\r\n\r\n\r\nconst initialState = {\r\n    friends: [\r\n        {id: 1, name: 'Dimych',},\r\n        {id: 2, name: 'Nasty',},\r\n        {id: 3, name: 'Vova',},\r\n    ] as FriendsType[]\r\n}\r\n\r\nexport type SidebarReducerInitialStateType = typeof initialState\r\n\r\nexport const sidebarReducer = (state: SidebarReducerInitialStateType = initialState, action: sidebarActionsType): SidebarReducerInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type sidebarActionsType = ReturnType<typeof sidebar>\r\n\r\nexport const sidebar = () => {\r\n    return {type: 'test'} as const\r\n}\r\n","import {authAPI} from '../API/api';\r\nimport {AppThunkType} from './store';\r\nimport {stopSubmit} from 'redux-form';\r\n\r\nexport enum USERS_ACTIONS {\r\n    SET_USER_DATA = 'SET_USER_DATA',\r\n    SET_AUTH_ERROR = 'SET_AUTH_ERROR',\r\n}\r\n\r\n\r\nexport type authInitialStatePropsType = {\r\n    id: number | null\r\n    login: string | null\r\n    email: string | null\r\n    isAuth: boolean\r\n    error: string | null\r\n}\r\n\r\nconst initialState: authInitialStatePropsType = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false,\r\n    error: null\r\n}\r\n\r\nexport const authReducer = (state: authInitialStatePropsType = initialState, action: authActionsType): authInitialStatePropsType => {\r\n\r\n    switch (action.type) {\r\n        case USERS_ACTIONS.SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case USERS_ACTIONS.SET_AUTH_ERROR:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\n// Action Creators\r\nexport const setAuthUserData = (id: number | null, login: string | null, email: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: USERS_ACTIONS.SET_USER_DATA,\r\n        payload: {\r\n            id,\r\n            login,\r\n            email,\r\n            isAuth,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const setAuthError = (error: string | null) => {\r\n    return {\r\n        type: USERS_ACTIONS.SET_AUTH_ERROR,\r\n        payload: {\r\n            error\r\n        }\r\n    } as const\r\n}\r\n// Thunk Creators\r\n\r\nexport const getAuthUserData = (): AppThunkType => async dispatch => {\r\n    try {\r\n        const response = await authAPI.me()\r\n        if (!response.data.resultCode) {\r\n            const {id, login, email} = response.data.data\r\n            dispatch(setAuthUserData(id, login, email, true))\r\n        }\r\n\r\n    } catch (e) {\r\n        throw new Error()\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean): AppThunkType => async dispatch => {\r\n    try {\r\n        const response = await authAPI.login(email, password, rememberMe)\r\n\r\n        if (response.data.resultCode === 0) {\r\n            return dispatch(getAuthUserData())\r\n        } else {// return dispatch(setAuthError(response.data.messages[0]))\r\n            const message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\r\n            return dispatch(stopSubmit('Login', {_error: message}))\r\n        }\r\n\r\n    } catch (e) {\r\n        throw new Error()\r\n    }\r\n}\r\nexport const logout = (): AppThunkType => async dispatch => {\r\n    try {\r\n        const response = await authAPI.logout()\r\n\r\n        if (!response.data.resultCode) {\r\n            dispatch(setAuthUserData(null, null, null, false))\r\n        }\r\n\r\n    } catch (e) {\r\n        throw new Error()\r\n    }\r\n}\r\n\r\n// Types\r\nexport type authActionsType =\r\n    | ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof setAuthError>\r\n","import {AppThunkType} from './store';\r\nimport {getAuthUserData} from './auth-reducer';\r\n\r\nexport enum USERS_ACTIONS {\r\n    INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'\r\n}\r\n\r\n\r\nconst initialState = {\r\n    initialized: false as boolean\r\n}\r\n\r\nexport const appReducer = (state: authInitialStatePropsType = initialState, action: appActionsType): authInitialStatePropsType => {\r\n\r\n    switch (action.type) {\r\n        case 'INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state, initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\n// Action Creators\r\nexport const initializedSuccess = () => ({\r\n        type: USERS_ACTIONS.INITIALIZED_SUCCESS,\r\n    } as const\r\n)\r\n\r\n// Thunk Creators\r\nexport const initializeApp = (): AppThunkType => dispatch => {\r\n    const promise = dispatch(getAuthUserData())\r\n\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n}\r\n\r\n// Types\r\nexport type authInitialStatePropsType = typeof initialState\r\nexport type initializedSuccessType = ReturnType<typeof initializedSuccess>\r\n\r\nexport type appActionsType =\r\n    | initializedSuccessType\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {profileActionsType, profileReducer} from './profile-reducer';\r\nimport {dialogsActionsType, dialogsReducer} from './dialogs-reducer';\r\nimport {sidebarActionsType, sidebarReducer} from './sidebar-reducer';\r\nimport {usersReducer} from './users-reducer';\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport {authActionsType, authReducer} from './auth-reducer';\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appActionsType, appReducer} from './app-reducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionsType =\r\n    | authActionsType\r\n    | dialogsActionsType\r\n    | profileActionsType\r\n    | sidebarActionsType\r\n    | appActionsType\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppStateType,\r\n    unknown,\r\n    AppActionsType>\r\n\r\nexport let store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './../Dialogs.module.css';\n\ntype dialogItemType = {\n    name: string\n    id: number\n}\n\nconst DialogItem = (props: dialogItemType) => {\n    const path = `/dialogs/${props.id}`\n    return (\n        <div className={`${s.dialog}`}>\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\n        </div>)\n}\n\nexport default DialogItem;\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nexport type MessageItemType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageItemType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","export const required = (value: string) => {\r\n    if (value) return undefined\r\n\r\n    return 'Field is required'\r\n}\r\nexport const maxLength = (max: number) => (value: string) => {\r\n    if (value && value.length > max) return `Max length is ${max} symbols`\r\n\r\n    return undefined\r\n}","import React from 'react';\r\nimport styles from './FormsControls.module.css'\r\nimport {WrappedFieldsProps} from 'redux-form';\r\n\r\nconst FormControl: React.FC<any> = (props) => {\r\n    const {meta, children} = props\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={`${styles.formControl} ${hasError && styles.error} `}>\r\n\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldsProps> = (props) => {\r\n    const {input} = props\r\n    return <FormControl {...props}>\r\n        <textarea {...input} {...props}/>\r\n    </FormControl>\r\n};\r\nexport const Input: React.FC<WrappedFieldsProps> = (props) => {\r\n    const {input} = props\r\n    return <FormControl {...props}>\r\n        <input {...input} {...props}/>\r\n    </FormControl>\r\n};","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLength, required} from '../../utils/validators/validators';\r\nimport {Textarea} from '../common/FormsControls/FormsControls';\r\n\r\nexport type MessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\ninterface Props {\r\n}\r\nconst maxLength100 = maxLength(100)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps <MessageFormDataType, Props>> = props => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={'newMessageBody'}\r\n                    placeHolder={'Enter your message'}\r\n                    validate={[required, maxLength100]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\nconst AddMessageFormRedux = reduxForm<MessageFormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default AddMessageFormRedux;","import React from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogsItem';\nimport Message from './Messages/Message';\nimport {DialogsPropsType} from './DialogsContainer';\nimport AddMessageForm, {MessageFormDataType} from './AddMessageForm';\n\n\nfunction Dialogs(props: DialogsPropsType) {\n\n    const state = props.dialogsPage\n\n    const dialogsElements = state.dialogs.map(dialogs => <DialogItem key={dialogs.id}\n                                                                     name={dialogs.name}\n                                                                     id={dialogs.id}/>)\n\n    const messagesElements = state.messages.map(message => <Message key={message.id}\n                                                                    message={message.message}/>)\n\n    const addNewMessage = (formData: MessageFormDataType) => {\n        props.onSendMessage(formData.newMessageBody)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n                <AddMessageForm onSubmit={addNewMessage}/>\n            </div>\n\n        </div>\n    );\n}\n\n\n\nexport default Dialogs;\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../redux/store';\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nfunction withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\nexport default withAuthRedirect;","import {DialogsInitialStateType, sendMessageAC} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {compose, Dispatch} from 'redux';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport React from 'react';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsInitialStateType;\r\n}\r\ntype MapDispatchToPropsType = {\r\n    onSendMessage: (value: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        onSendMessage(value: string) {\r\n            dispatch(sendMessageAC(value))\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs)","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './Sidebar.module.css';\nimport {FriendsType, SidebarType} from '../../redux/sidebar-reducer';\nimport {SidebarPropsType} from './SidebarContainer';\n\n\nconst Sidebar: React.FC<SidebarPropsType> = (props) => {\n    return (\n        <aside className={s.sidebar}>\n            <nav >\n                <ul>\n                    <li><NavLink to={'/profile'} activeClassName={s.active}>Profile</NavLink></li>\n                    <li><NavLink to={'/dialogs'} activeClassName={s.active}>Messages</NavLink></li>\n                    <li><NavLink to={'/users'} activeClassName={s.active}>Users</NavLink></li>\n                </ul>\n            </nav>\n            <SidebarFriendsBlock friends={props.sidebar.friends}/>\n        </aside>\n    )\n}\n\nconst SidebarFriendsBlock: React.FC<SidebarType> = (props) => {\n\n    const friendItem = props.friends.map(friend => <Friend key={friend.id} id={friend.id} name={friend.name}/>)\n\n    return (\n        <div>\n            <h3>Friends</h3>\n            <div className={s.friendBlock}>\n                {friendItem}\n            </div>\n        </div>\n    )\n}\n\nconst Friend: React.FC<FriendsType> = (props) => {\n    return (\n        <div className={s.friend}>\n            <div className={s.imgProfilePhoto}/>\n            <p className={s.name}>{props.name}</p>\n        </div>\n    )\n}\n\nexport default Sidebar;\n","import Sidebar from './Sidebar';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {connect} from 'react-redux';\r\nimport { SidebarType } from '../../redux/sidebar-reducer';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    sidebar: SidebarType\r\n}\r\ntype MapDispatchToPropsType = {}\r\n\r\nexport type SidebarPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        sidebar: state.sidebar\r\n    }\r\n}\r\nconst mapDispatchToProps = () => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport const SidebarContainer = connect(mapStateToProps, mapDispatchToProps)(Sidebar)","export default __webpack_public_path__ + \"static/media/userPhoto.b89021c6.png\";","import React from 'react';\r\nimport userPhoto from '../../assets/images/userPhoto.png'\r\nimport styles from './UsersContainer.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {ResponseItemType} from '../../API/api';\r\n\r\ntype PropsType = {\r\n    users: ResponseItemType[]\r\n    totalCount: number,\r\n    pageSize: number\r\n    currentPage: number\r\n    followingInProgress: number[]\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    onPageChanged: (page: number) => void\r\n}\r\n\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n    const UsersEl = props.users.map((u) => {\r\n        return (\r\n            <div key={u.id}>\r\n                <div>\r\n                    <NavLink to={`profile/${u.id}`}><img src={u.photos.small !== null ? u.photos.small : userPhoto}\r\n                                                         className={styles.userPhoto} alt={'Avatar'}/></NavLink>\r\n                </div>\r\n                <div>\r\n                    {u.followed\r\n                        ? <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                  onClick={() => {props.unfollow(u.id)}}>Unfollow</button>\r\n\r\n                        : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                  onClick={() => {props.follow(u.id)}}>Follow</button>}\r\n                </div>\r\n                <div>\r\n                    <div>{u.name}</div>\r\n                    <div>{u.status}</div>\r\n                </div>\r\n                <div>\r\n                    <div>{'u.location.country'}</div>\r\n                    <div>{'u.location.city'}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    // let pagesCount = Math.ceil(props.totalCount / props.pageSize)\r\n    const pages = []\r\n\r\n    for (let i = 1; i <= 30; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return <>\r\n\r\n        <div>\r\n            {pages.map(page => {\r\n                return <span\r\n                    key={page}\r\n                    className={props.currentPage === page ? styles.selectedPage : ''}\r\n                    onClick={() => {\r\n                        props.onPageChanged(page)\r\n                    }}\r\n                >{page} </span>\r\n            })}\r\n            {UsersEl}\r\n        </div>\r\n    </>\r\n}","import React from 'react'\r\nimport styles from './Preloader.module.css'\r\n\r\n\r\n\r\nexport const Preloader = () => {\r\n    return <>\r\n            <div className={styles.ldsHourglass}/>\r\n    </>\r\n}","import React from 'react';\r\nimport {Users} from './Users';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {\r\n    follow,\r\n    getUsers,\r\n    setCurrentPage,\r\n    unfollow,\r\n    UsersInitialStatePropsType\r\n} from '../../redux/users-reducer';\r\nimport {Preloader} from '../common/Preloader/Preloader';\r\n\r\n\r\nexport class UsersContainerAPI extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (page: number) => {\r\n        this.props.getUsers(page, this.props.pageSize)\r\n        this.props.setCurrentPage(page)\r\n    }\r\n\r\n    onFollow = (id: number) => {\r\n        this.props.follow(id)\r\n    }\r\n    onUnFollow = (id: number) => {\r\n        this.props.unfollow(id)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching && <Preloader/>}\r\n            <Users users={this.props.users}\r\n                   currentPage={this.props.currentPage}\r\n                   pageSize={this.props.pageSize}\r\n                   totalCount={this.props.totalCount}\r\n                   onPageChanged={this.onPageChanged}\r\n                   follow={this.onFollow}\r\n                   unfollow={this.onUnFollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    users: UsersInitialStatePropsType[]\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalCount: state.usersPage.totalCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n    }\r\n}\r\n\r\nconst connector = connect(mapStateToProps, {\r\n    setCurrentPage,\r\n    getUsers,\r\n    follow,\r\n    unfollow\r\n})\r\n\r\nexport type UsersPropsType = ConnectedProps<typeof connector>\r\n\r\nexport default connector(UsersContainerAPI)","import React from 'react';\r\n\r\ntype PropsType = {\r\n    title: string\r\n    onChange: (value: string) => void\r\n}\r\n\r\nclass EditableSpan extends React.Component<PropsType> {\r\n    state = {\r\n        editMode: false,\r\n        title: this.props.title,\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            editMode: true,\r\n        })\r\n    }\r\n    DeactivateEditMode = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            editMode: false,\r\n        })\r\n        this.props.onChange(this.state.title)\r\n    }\r\n\r\n    onChange = (e: any) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (prevProps.title !== this.state.title) {\r\n            this.setState({\r\n                title: this.props.title\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode && <div>\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.title || 'Status is not defined'}</span>\r\n                </div>}\r\n                {this.state.editMode && <div>\r\n                    <input\r\n                        type={'text'}\r\n                        value={this.state.title}\r\n                        onBlur={this.DeactivateEditMode}\r\n                        onChange={this.onChange}\r\n                        autoFocus\r\n                    />\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditableSpan;","import React from 'react';\r\nimport styles from './ProfileData.module.css'\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport defaultUserPhoto from '../../../assets/images/userPhoto.png'\r\nimport EditableSpan from '../../common/EditableSpan/EditableSpan';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nconst ProfileData = (props: PropsType) => {\r\n    const {profile} = props\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={styles.profileData}>\r\n            <img src={profile.photos.small ? profile.photos.small : defaultUserPhoto} alt=\"profile avatar\"/>\r\n            <div>\r\n                <h3>{profile.fullName}</h3>\r\n            </div>\r\n\r\n            <EditableSpan title={props.status} onChange={props.updateStatus}/>\r\n\r\n            {profile.aboutMe && <div>\r\n                <h3>About me:</h3>\r\n                <span>{profile.aboutMe}</span>\r\n            </div>}\r\n            <div>\r\n                <h3>My contacts:</h3>\r\n                <ProfileContacts contacts={profile.contacts}/>\r\n            </div>\r\n            {profile.lookingForAJob && <div>\r\n                <h3>Ищу работу</h3>\r\n                {profile.lookingForAJobDescription}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData;\r\n\r\ntype ProfileContactsType = {\r\n    contacts: {\r\n        'facebook': string | null\r\n        'website': string | null\r\n        'vk': string | null\r\n        'twitter': string | null\r\n        'instagram': string | null\r\n        'youtube': string | null\r\n        'github': string | null\r\n        'mainLink': string | null\r\n    }\r\n}\r\n\r\nconst ProfileContacts = (props: ProfileContactsType) => {\r\n\r\n    const netWork = Object.keys(props.contacts)\r\n    const netWorkLinks = Object.values(props.contacts)\r\n\r\n    netWork.map(key => (<div>{key}</div>))\r\n\r\n    return (\r\n        <div className={styles.wrapperContacts}>\r\n\r\n            <div className={styles.contacts}>{netWork.map(key => {\r\n                return (\r\n                    <div>\r\n                        {key}\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n\r\n            <div className={styles.contacts}>{netWorkLinks.map(value => {\r\n                return (\r\n                    <div>\r\n                        {value ? value : 'Не заполнено'}\r\n                    </div>\r\n                )\r\n            })\r\n            }</div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\nimport {PostType} from '../../../../redux/profile-reducer';\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://d13ezvd6yrslxm.cloudfront.net/wp/wp-content/images/avatar-2-story.jpg\"\r\n                 alt=\"Logo with Profile\"/>\r\n            <p>{props.message}</p>\r\n            <p>Like {props.likesCount}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLength, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\n\r\n\r\nexport type NewPostFormDataType = {\r\n    pastText: string\r\n}\r\ntype Props = {}\r\n\r\nconst maxLength10 = maxLength(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<NewPostFormDataType, Props>> = props => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={'pastText'}\r\n                    placeHolder={'Enter new post'}\r\n                    validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst NewPostReduxForm = reduxForm<NewPostFormDataType>({form: 'profileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport default NewPostReduxForm;","import {addPostActionCreator, PostType} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/store';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostType>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost(newPostText: string) {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport AddNewPostForm, {NewPostFormDataType} from './AddNewPostForm';\r\n\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    const postsElements = props.posts.map(post =>\r\n        <Post\r\n            key={post.id}\r\n            id={post.id}\r\n            message={post.message}\r\n            likesCount={post.likesCount}/>)\r\n\r\n    const onAddPost = (formData: NewPostFormDataType) => {\r\n        props.addPost(formData.pastText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Posts</h3>\r\n            <div className={s.new_post}>\r\n                <AddNewPostForm onSubmit={onAddPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileData from './ProfileData/ProfileData';\r\nimport {MyPostsContainer} from './Posts/MyPostsContainer';\r\nimport {ProfilePropsType} from './ProfileContainer';\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            {/*<ProfileLogo />*/}\r\n            <ProfileData\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\nimport Profile from './Profile';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n// Component own properties\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId ? this.props.authorizedUserId.toString() : ''\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props}\r\n                        profile={this.props.profile}\r\n                        status={this.props.status}\r\n                        updateStatus={this.props.updateStatus}\r\n        />\r\n    }\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    auth: boolean\r\n}\r\nexport type ProfilePropsType = ConnectedProps<typeof connector>;\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        auth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\n\r\nconst connector = connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connector,\r\n    withRouter,\r\n)(ProfileContainer)","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport s from './Header.module.css';\nimport { NavLink } from 'react-router-dom';\nimport {HeaderPropsType} from './HeaderContainer';\n\nexport const Header = (props: HeaderPropsType) => {\n  return (\n    <header className={s.header}>\n        <img src={logo} alt=\"\"/>\n\n        <div className={s.loginBlock}>\n            {props.isAuth\n                ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\n                : <NavLink to={'/Login'}>Login</NavLink> }\n\n        </div>\n    </header>\n  );\n}\n","import React from 'react';\nimport {Header} from './Header';\nimport {connect, ConnectedProps} from 'react-redux';\nimport {logout} from '../../redux/auth-reducer';\nimport {AppStateType} from '../../redux/store';\n\nexport class HeaderContainer extends React.Component<HeaderPropsType> {\n\n    render() {\n        return (<Header {...this.props}/>);\n    }\n}\n\ntype MapStateToProps = {\n    isAuth: boolean\n    login: string | null\n}\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login,\n    }\n}\n\nconst connector = connect(mapStateToProps, {\n    logout,\n})\nexport default connector(HeaderContainer);\n\n// Types\nexport type HeaderPropsType = ConnectedProps<typeof connector>;\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../common/FormsControls/FormsControls';\r\nimport {required} from '../../utils/validators/validators';\r\nimport styles from '../common/FormsControls/FormsControls.module.css'\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ninterface Props {}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps <FormDataType, Props>> = props => {\r\n    return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field component={Input}\r\n                           name={'email'}\r\n                           placeholder={'Email'}\r\n                           validate={required}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Field component={Input}\r\n                           name={'password'}\r\n                           placeholder={'Password'}\r\n                           type={'password'}\r\n                           validate={required}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Field component={Input}\r\n                           name={'rememberMe'}\r\n                           type={'checkbox'}\r\n                    />\r\n                </div>\r\n                {props.error && <div className={styles.formSummaryError}>\r\n                    {props.error}\r\n                </div>}\r\n                <div>\r\n                    <button>Login</button>\r\n                </div>\r\n            </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'Login'}) (LoginForm)\r\n\r\nexport default LoginReduxForm;","import React from 'react';\r\nimport LoginReduxForm, {FormDataType} from './LoginForm';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../../redux/store';\r\n\r\nconst LoginPage: React.FC<Props> = props => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        const {email, password, rememberMe} = formData\r\n        props.login(email, password, rememberMe)\r\n    }\r\n\r\n    if(props.isAuth.isAuth) {\r\n        return <Redirect to={`/profile/${props.isAuth.id}`} />\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <div>{props.isAuth.error}</div>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth\r\n})\r\nconst connector = connect(mapStateToProps, {login})\r\n\r\nexport default connector(LoginPage)\r\n\r\n// Types\r\ntype Props = ConnectedProps<typeof connector>\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Route, withRouter} from 'react-router-dom';\r\nimport DialogsContainer from './Components/Dialogs/DialogsContainer';\r\nimport {SidebarContainer} from './Components/Sidebar/SidebarContainer';\r\nimport UsersContainer from './Components/Users/UsersContainer';\r\nimport ProfileContainer from './Components/Profile/ProfileContainer';\r\nimport HeaderContainer from './Components/Header/HeaderContainer';\r\nimport LoginPage from './Components/Login/LoginPage';\r\nimport {compose} from 'redux';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\nimport {initializeApp} from './redux/app-reducer';\r\nimport {AppStateType} from './redux/store';\r\nimport {Preloader} from './Components/common/Preloader/Preloader';\r\n\r\nclass App extends React.Component<any> {\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <HashRouter>\r\n                <div className=\"app_wrapper\">\r\n                    <HeaderContainer/>\r\n                    <SidebarContainer/>\r\n                    <div className={'app_wrapper_content'}>\r\n                        <Route path=\"/login\" render={() => <LoginPage/>}/>\r\n                        <Route path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\r\n\r\n                        <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\r\n                        <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n                    </div>\r\n                </div>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nconst connector = connect(mapStateToProps, {initializeApp})\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connector,\r\n)(App)\r\n\r\n// Types\r\nexport type AppPropsType = ConnectedProps<typeof connector>;\r\ntype MapStateToProps = {\r\n    initialized: boolean\r\n}","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from './redux/store';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n\r\n    </BrowserRouter>, document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-control\":\"FormsControls_form-control__JGxNj\",\"error\":\"FormsControls_error__PAzfS\",\"formSummaryError\":\"FormsControls_formSummaryError__5MlPU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileData\":\"ProfileData_profileData__3_er9\",\"wrapperContacts\":\"ProfileData_wrapperContacts__2yaPx\",\"contacts\":\"ProfileData_contacts__22veH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1qs7u\",\"posts\":\"MyPosts_posts__tbkbY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"UsersContainer_userPhoto__1HjXU\",\"selectedPage\":\"UsersContainer_selectedPage__2syrM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2x0-v\",\"loginBlock\":\"Header_loginBlock__1i9Ib\"};"],"sourceRoot":""}