{"version":3,"sources":["Components/common/Preloader/Preloader.module.css","Components/Profile/Profile.module.css","Components/Profile/Posts/Post/Post.module.css","Components/Dialogs/Dialogs.module.css","Components/Sidebar/Sidebar.module.css","redux/profile-reducer.ts","reportWebVitals.ts","API/api.ts","redux/users-reducer.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/auth-reducer.ts","redux/store.ts","Components/Dialogs/DialogItem/DialogsItem.tsx","Components/Dialogs/Messages/Message.tsx","utils/validators/validators.ts","Components/common/FormsControls/FormsControls.tsx","Components/Dialogs/AddMessageForm.tsx","Components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Sidebar/Sidebar.tsx","Components/Sidebar/SidebarContainer.tsx","assets/images/userPhoto.png","Components/Users/Users.tsx","Components/common/Preloader/Preloader.tsx","Components/Users/UsersContainer.tsx","Components/common/EditableSpan/EditableSpan.tsx","Components/Profile/ProfileData/ProfileData.tsx","Components/Profile/Posts/Post/Post.tsx","Components/Profile/Posts/AddNewPostForm.tsx","Components/Profile/Posts/MyPostsContainer.tsx","Components/Profile/Posts/MyPosts.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","Components/Header/logo.svg","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/LoginPage.tsx","App.tsx","index.tsx","Components/Profile/ProfileData/ProfileData.module.css","Components/Profile/Posts/MyPosts.module.css","Components/common/FormsControls/Textarea.module.css","Components/Users/UsersContainer.module.css","Components/Header/Header.module.css"],"names":["module","exports","PROFILE_ACTION_TYPE","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","get","response","data","id","post","delete","profileAPI","userId","status","put","authAPI","email","password","rememberMe","USERS_ACTIONS","initialState","posts","message","likesCount","profile","setStatus","type","SET_STATUS","SEND_MESSAGE","dialogs","name","messages","friends","users","totalCount","isFetching","followingInProgress","toggleIsFetching","TOGGLE_IS_FETCHING","toggleFollowingProgress","isFollow","TOGGLE_IS_FOLLOWING_IN_PROGRESS","login","isAuth","error","setAuthUserData","SET_USER_DATA","payload","getAuthUserData","dispatch","a","resultCode","Error","rootReducer","combineReducers","profilePage","state","action","ADD_POST","newPost","Date","getTime","newPostText","SET_USER_PROFILE","dialogsPage","newMessage","value","trimmedText","trim","sidebar","usersPage","FOLLOW","map","u","userID","followed","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","filter","auth","SET_AUTH_ERROR","form","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","DialogItem","props","path","className","s","dialog","to","activeClassName","active","Message","required","maxLength","max","length","FormControl","input","meta","children","hasError","touched","styles","formControl","Textarea","Input","maxLength100","AddMessageFormRedux","reduxForm","onSubmit","handleSubmit","Field","component","placeHolder","validate","Dialogs","dialogsElements","messagesElements","dialogsItems","formData","onSendMessage","newMessageBody","mapStateToPropsForRedirect","withAuthRedirect","Component","connect","restProps","compose","sendMessageAC","SidebarFriendsBlock","friendItem","friend","friendBlock","Friend","imgProfilePhoto","Sidebar","SidebarContainer","Users","UsersEl","src","photos","small","userPhoto","alt","disabled","some","onClick","unfollow","follow","pages","i","push","page","selectedPage","onPageChanged","Preloader","ldsHourglass","UsersContainerAPI","getUsers","setCurrentPage","onFollow","onUnFollow","this","React","connector","items","EditableSpan","editMode","title","activateEditMode","setState","DeactivateEditMode","onChange","e","currentTarget","prevProps","prevState","snapshot","onDoubleClick","onBlur","autoFocus","ProfileData","profileData","defaultUserPhoto","fullName","updateStatus","aboutMe","contacts","lookingForAJob","lookingForAJobDescription","ProfileContacts","netWork","Object","keys","netWorkLinks","values","key","wrapperContacts","Post","item","maxLength10","NewPostReduxForm","MyPostsContainer","addPost","addPostActionCreator","postsElements","postsBlock","new_post","pastText","Profile","ProfileContainer","match","params","toString","getUserProfile","getStatus","withRouter","Header","header","logo","loginBlock","logout","HeaderContainer","LoginReduxForm","placeholder","App","render","DialogsContainer","UsersContainer","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76b84392.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__3XCPk\",\"ldsHourglass\":\"Preloader_ldsHourglass__pzUo-\",\"lds-hourglass\":\"Preloader_lds-hourglass__1hkv0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__CiwxZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2q3Eb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__BRHD6\",\"dialogsItems\":\"Dialogs_dialogsItems__1aH1f\",\"dialog\":\"Dialogs_dialog__1glHE\",\"active\":\"Dialogs_active__3NWs5\",\"messanges\":\"Dialogs_messanges__WVkjx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__13B6p\",\"active\":\"Sidebar_active__2WsD6\",\"friendBlock\":\"Sidebar_friendBlock__2oXRU\",\"friend\":\"Sidebar_friend__3Y_SH\",\"name\":\"Sidebar_name__2Hl5y\",\"imgProfilePhoto\":\"Sidebar_imgProfilePhoto__1UA-e\"};","import {profileAPI} from '../API/api';\r\nimport {AppThunkType} from './store';\r\n\r\nexport enum PROFILE_ACTION_TYPE {\r\n    ADD_POST = 'APP/PROFILE/ADD-POST',\r\n    SET_USER_PROFILE = 'APP/PROFILE/SET_PROFILE_INFO-NEW-POST-TEXT',\r\n    SET_STATUS = 'APP/PROFILE/SET_STATUS',\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfileType = {\r\n    'aboutMe': string | null\r\n    'contacts': {\r\n        'facebook': string | null\r\n        'website': string | null\r\n        'vk': string | null\r\n        'twitter': string | null\r\n        'instagram': string | null\r\n        'youtube': string | null\r\n        'github': string | null\r\n        'mainLink': string | null\r\n    },\r\n    'lookingForAJob': string | null\r\n    'lookingForAJobDescription': string | null\r\n    'fullName': string | null\r\n    'userId': number\r\n    'photos': {\r\n        'small': string | null\r\n        'large': string | null\r\n    }\r\n}\r\nlet initialState = {\r\n    posts: [\r\n        {\r\n            id: 1,\r\n            message: 'Good this site',\r\n            likesCount: 10\r\n        },\r\n        {\r\n            id: 2,\r\n            message: 'Good this site',\r\n            likesCount: 10\r\n        }\r\n    ] as PostType[],\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n}\r\n\r\nexport type ProfileReducerInitialStateType = typeof initialState\r\n\r\n\r\nexport const profileReducer = (state: ProfileReducerInitialStateType = initialState, action: profileActionsType): ProfileReducerInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case PROFILE_ACTION_TYPE.ADD_POST:\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n\r\n\r\n        case PROFILE_ACTION_TYPE.SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case PROFILE_ACTION_TYPE.SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport type profileActionsType = ReturnType<typeof addPostActionCreator>\r\n\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n\r\n// Action Creators\r\nexport const addPostActionCreator = (newPostText: string) => {\r\n    return {type: PROFILE_ACTION_TYPE.ADD_POST, newPostText} as const\r\n}\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {type: PROFILE_ACTION_TYPE.SET_USER_PROFILE, profile} as const\r\n}\r\nexport const setStatus = (status: string) => {\r\n    return {type: PROFILE_ACTION_TYPE.SET_STATUS, status} as const\r\n}\r\n\r\n// Thunk Creator\r\nexport const getUserProfile = (userId: string): AppThunkType => async dispatch => {\r\n    try {\r\n        const response = await profileAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response.data))\r\n    } catch (e) {\r\n        throw new Error()\r\n    }\r\n}\r\nexport const getStatus = (userId: string): AppThunkType => async dispatch => {\r\n    try {\r\n        const response = await profileAPI.getStatus(userId)\r\n        dispatch(setStatus(response.data))\r\n    } catch (e) {\r\n        throw new Error()\r\n    }\r\n}\r\nexport const updateStatus = (status: string): AppThunkType => async dispatch => {\r\n    try {\r\n        const response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    } catch (e) {\r\n        throw new Error()\r\n    }\r\n}\r\n\r\n\r\n// const handlers = {\r\n//     [LOADING]: (state) => {\r\n//         return {...state, isLoading: true}\r\n//     },\r\n//     DEFAULT: (state) => state,\r\n// }\r\n//\r\n// export const userReducer = (state, action) => {\r\n//     const handler = handlers[action.type] || handlers.DEFAULT\r\n//     return handler(state, action)\r\n// }","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\r\nimport {ProfileType} from '../redux/profile-reducer';\r\n\r\nexport type ResponseItemType = {\r\n    'name': string\r\n    'id': number\r\n    'uniqueUrlName': null | string\r\n    'photos': {\r\n        'small': null | string\r\n        'large': null | string\r\n    },\r\n    'status': null | string\r\n    'followed': boolean\r\n}\r\nexport type ServerData = {\r\n    'items': ResponseItemType[]\r\n    'totalCount': number\r\n    'error': null | string\r\n}\r\ntype ResponseType = {\r\n    data: ServerData\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '458be47a-15a2-43bc-bb9e-a21974e6a059'\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers: (currentPage: number = 1, pageSize: number = 10) => {\r\n        return instance.get<ServerData>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then((response: ResponseType) => response.data)\r\n    },\r\n    follow: (id: number = 2) => {\r\n        return instance.post(`follow/${id}`)\r\n            .then((response) => response.data)\r\n    },\r\n    unfollow: (id: number = 2) => {\r\n        return instance.delete(`follow/${id}`)\r\n            .then((response) => response.data)\r\n    },\r\n}\r\n\r\n\r\nexport const profileAPI = {\r\n    getProfile: (userId: string) => {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n    },\r\n    getStatus: (userId: string) => {\r\n        return instance.get<string>(`/profile/status/${userId}`)\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return instance.put(`/profile/status/`, {\r\n            status: status\r\n        })\r\n    }\r\n}\r\n\r\n\r\ntype AuthResponseType = {\r\n    data: {\r\n        id: number\r\n        login: string\r\n        email: string\r\n    }\r\n    'messages': string[]\r\n    'fieldsErrors': [],\r\n    'resultCode': number\r\n}\r\n\r\nexport const authAPI = {\r\n    me: () => {\r\n        return instance.get<AuthResponseType>(`auth/me`)\r\n    },\r\n    login: (email: string, password: string, rememberMe: boolean = false,) => {\r\n        return instance.post<AuthResponseType>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n        })\r\n    },\r\n    logout: () => {\r\n        return instance.delete(`auth/login`)\r\n    },\r\n}","import {Dispatch} from 'redux';\r\nimport {usersAPI} from '../API/api';\r\n\r\nexport enum USERS_ACTIONS {\r\n    FOLLOW = 'FOLLOW',\r\n    UNFOLLOW = 'UNFOLLOW',\r\n    SET_USERS = 'SET_USERS',\r\n    SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',\r\n    SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT',\r\n    TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING',\r\n    TOGGLE_IS_FOLLOWING_IN_PROGRESS = 'TOGGLE_IS_FOLLOWING_IN_PROGRESS',\r\n}\r\n\r\n\r\nexport type UsersInitialStatePropsType = {\r\n    'name': string\r\n    'id': number\r\n    'uniqueUrlName': string | null\r\n    'photos': {\r\n        'small': string | null\r\n        'large': string | null\r\n    },\r\n    'status': string | null\r\n    'followed': boolean\r\n}\r\n\r\nexport type UsersInitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    users: [] as UsersInitialStatePropsType[],\r\n    pageSize: 10,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as number[]\r\n}\r\n\r\nexport const usersReducer = (state: UsersInitialStateType = initialState, action: ActionsType): UsersInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case USERS_ACTIONS.FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case USERS_ACTIONS.UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case USERS_ACTIONS.SET_USERS:\r\n            return {...state, users: [...action.users]}\r\n        case USERS_ACTIONS.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case USERS_ACTIONS.SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalCount: action.totalCount}\r\n        case USERS_ACTIONS.TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case USERS_ACTIONS.TOGGLE_IS_FOLLOWING_IN_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFollow\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : [...state.followingInProgress.filter(id => id !== action.userId)]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport type ActionsType = ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\n\r\n// Action Creators\r\nexport const followSuccess = (userID: number) => {\r\n    return {type: USERS_ACTIONS.FOLLOW, userID} as const\r\n}\r\nexport const unfollowSuccess = (userID: number) => {\r\n    return {type: USERS_ACTIONS.UNFOLLOW, userID} as const\r\n}\r\nexport const setUsers = (users: UsersInitialStatePropsType[]) => {\r\n    return {type: USERS_ACTIONS.SET_USERS, users} as const\r\n}\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {type: USERS_ACTIONS.SET_CURRENT_PAGE, currentPage} as const\r\n}\r\nexport const setTotalUsersCount = (totalCount: number) => {\r\n    return {type: USERS_ACTIONS.SET_TOTAL_USERS_COUNT, totalCount} as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {type: USERS_ACTIONS.TOGGLE_IS_FETCHING, isFetching} as const\r\n}\r\nexport const toggleFollowingProgress = (isFollow: boolean, userId: number) => {\r\n    return {type: USERS_ACTIONS.TOGGLE_IS_FOLLOWING_IN_PROGRESS, isFollow, userId} as const\r\n}\r\n\r\n// Thunk Creator\r\nexport const getUsers = (currentPage: number, pageSize: number) => (dispatch: Dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    usersAPI.getUsers(currentPage, pageSize)\r\n        .then((data) => {\r\n            dispatch(toggleIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        })\r\n}\r\nexport const follow = (userId: number) => (dispatch: Dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    usersAPI.follow(userId)\r\n        .then((data) => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(followSuccess(userId))\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            }\r\n        })\r\n}\r\nexport const unfollow = (userId: number) => (dispatch: Dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    usersAPI.unfollow(userId)\r\n        .then((data) => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(unfollowSuccess(userId))\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            }\r\n        })\r\n}","export const SEND_MESSAGE = 'SEND-MESSAGE'\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\ntype DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych',},\r\n        {id: 2, name: 'Nasty',},\r\n        {id: 3, name: 'Vova',},\r\n        {id: 4, name: 'Viktor',},\r\n        {id: 5, name: 'Olya',},\r\n    ] as DialogsType[],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'Dimych'},\r\n    ] as MessageType[]\r\n}\r\n\r\nexport type DialogsInitialStateType = typeof initialState\r\n\r\n/*export type AddMessageActionType = ReturnType<typeof sendMessageAC>\r\nexport type UpdateNewDialogMessageActionType = ReturnType<typeof updateNewMessageBodyAC>*/\r\nexport const dialogsReducer = (state: DialogsInitialStateType = initialState, action: dialogsActionsType): DialogsInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            const newMessage: MessageType = {\r\n                id: new Date().getTime(),\r\n                message: action.value,\r\n            }\r\n            const trimmedText = action.value.trim()\r\n            if (trimmedText) {\r\n                return {\r\n                    ...state,\r\n                    messages: [...state.messages, newMessage],\r\n                }\r\n            }\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport type dialogsActionsType = ReturnType<typeof sendMessageAC>\r\n\r\nexport const sendMessageAC = (value: string) => {\r\n    return {type: SEND_MESSAGE, value} as const\r\n}\r\n","export type FriendsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type SidebarType = {\r\n    friends: Array<FriendsType>\r\n}\r\n\r\n\r\nconst initialState = {\r\n    friends: [\r\n        {id: 1, name: 'Dimych',},\r\n        {id: 2, name: 'Nasty',},\r\n        {id: 3, name: 'Vova',},\r\n    ] as FriendsType[]\r\n}\r\n\r\nexport type SidebarReducerInitialStateType = typeof initialState\r\n\r\nexport const sidebarReducer = (state: SidebarReducerInitialStateType = initialState, action: sidebarActionsType): SidebarReducerInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type sidebarActionsType = ReturnType<typeof sidebar>\r\n\r\nexport const sidebar = () => {\r\n    return {type: 'test'} as const\r\n}\r\n","import {authAPI} from '../API/api';\r\nimport {AppThunkType} from './store';\r\n\r\nexport enum USERS_ACTIONS {\r\n    SET_USER_DATA = 'SET_USER_DATA',\r\n    SET_AUTH_ERROR = 'SET_AUTH_ERROR',\r\n}\r\n\r\n\r\nexport type authInitialStatePropsType = {\r\n    id: number | null\r\n    login: string | null\r\n    email: string | null\r\n    isAuth: boolean\r\n    error: string | null\r\n}\r\n\r\nconst initialState: authInitialStatePropsType = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false,\r\n    error: null\r\n}\r\n\r\nexport const authReducer = (state: authInitialStatePropsType = initialState, action: authActionsType): authInitialStatePropsType => {\r\n\r\n    switch (action.type) {\r\n        case USERS_ACTIONS.SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case USERS_ACTIONS.SET_AUTH_ERROR:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\n// Action Creators\r\nexport const setAuthUserData = (id: number | null, login: string | null, email: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: USERS_ACTIONS.SET_USER_DATA,\r\n        payload: {\r\n            id,\r\n            login,\r\n            email,\r\n            isAuth,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const setAuthError = (error: string | null) => {\r\n    return {\r\n        type: USERS_ACTIONS.SET_AUTH_ERROR,\r\n        payload: {\r\n            error\r\n        }\r\n    } as const\r\n}\r\n// Thunk Creators\r\n\r\nexport const getAuthUserData = (): AppThunkType => async dispatch => {\r\n    try {\r\n        const response = await authAPI.me()\r\n        const {id, login, email} = response.data.data\r\n        if (!response.data.resultCode) {\r\n            dispatch(setAuthUserData(id, login, email, true))\r\n        }\r\n\r\n    } catch (e) {\r\n        throw new Error()\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean): AppThunkType => async dispatch => {\r\n    try {\r\n        const response = await authAPI.login(email, password, rememberMe)\r\n\r\n        switch (response.data.resultCode) {\r\n            case 0:\r\n                return dispatch(getAuthUserData())\r\n            case 1:\r\n            case 10:\r\n                return dispatch(setAuthError(response.data.messages[0]))\r\n        }\r\n\r\n    } catch (e) {\r\n        throw new Error()\r\n    }\r\n}\r\nexport const logout = (): AppThunkType => async dispatch => {\r\n    try {\r\n        const response = await authAPI.logout()\r\n\r\n        if (!response.data.resultCode) {\r\n            dispatch(setAuthUserData(null, null, null, false))\r\n        }\r\n\r\n    } catch (e) {\r\n        throw new Error()\r\n    }\r\n}\r\n\r\n// Types\r\nexport type authActionsType =\r\n    | ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof setAuthError>\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {profileActionsType, profileReducer} from './profile-reducer';\r\nimport {dialogsActionsType, dialogsReducer} from './dialogs-reducer';\r\nimport {sidebarActionsType, sidebarReducer} from './sidebar-reducer';\r\nimport {usersReducer} from './users-reducer';\r\nimport thunk, { ThunkAction } from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport {authActionsType, authReducer} from './auth-reducer';\r\nimport {reducer as formReducer} from 'redux-form'\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionsType = authActionsType | dialogsActionsType | profileActionsType | sidebarActionsType\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<\r\n    ReturnType,\r\n    AppStateType,\r\n    unknown,\r\n    AppActionsType\r\n    >\r\n\r\nexport let store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './../Dialogs.module.css';\n\ntype dialogItemType = {\n    name: string\n    id: number\n}\n\nconst DialogItem = (props: dialogItemType) => {\n    const path = `/dialogs/${props.id}`\n    return (\n        <div className={`${s.dialog}`}>\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\n        </div>)\n}\n\nexport default DialogItem;\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nexport type MessageItemType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageItemType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","export const required = (value: string) => {\r\n    if (value) return undefined\r\n\r\n    return 'Field is required'\r\n}\r\nexport const maxLength = (max: number) => (value: string) => {\r\n    if (value && value.length > max) return `Max length is ${max} symbols`\r\n\r\n    return undefined\r\n}","import React from 'react';\r\nimport styles from './Textarea.module.css'\r\nimport {WrappedFieldsProps} from 'redux-form';\r\n\r\nconst FormControl: React.FC<any> = (props) => {\r\n    const {input, meta, children} = props\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={`${styles.formControl} ${hasError && styles.error} `}>\r\n\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldsProps> = (props) => {\r\n    const {input, meta, children} = props\r\n    return <FormControl {...props}>\r\n        <textarea {...input} {...props}/>\r\n    </FormControl>\r\n};\r\nexport const Input: React.FC<WrappedFieldsProps> = (props) => {\r\n    const {input, meta, children} = props\r\n    return <FormControl {...props}>\r\n        <input {...input} {...props}/>\r\n    </FormControl>\r\n};","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLength, required} from '../../utils/validators/validators';\r\nimport {Textarea} from '../common/FormsControls/FormsControls';\r\n\r\nexport type MessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\ninterface Props {\r\n}\r\nconst maxLength100 = maxLength(100)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps <MessageFormDataType, Props>> = props => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={'newMessageBody'}\r\n                    placeHolder={'Enter your message'}\r\n                    validate={[required, maxLength100]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\nconst AddMessageFormRedux = reduxForm<MessageFormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default AddMessageFormRedux;","import React from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogsItem';\nimport Message from './Messages/Message';\nimport {DialogsPropsType} from './DialogsContainer';\nimport AddMessageForm, {MessageFormDataType} from './AddMessageForm';\n\n\nfunction Dialogs(props: DialogsPropsType) {\n\n    const state = props.dialogsPage\n\n    const dialogsElements = state.dialogs.map(dialogs => <DialogItem key={dialogs.id}\n                                                                     name={dialogs.name}\n                                                                     id={dialogs.id}/>)\n\n    const messagesElements = state.messages.map(message => <Message key={message.id}\n                                                                    message={message.message}/>)\n\n    const addNewMessage = (formData: MessageFormDataType) => {\n        props.onSendMessage(formData.newMessageBody)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n                <AddMessageForm onSubmit={addNewMessage}/>\n            </div>\n\n        </div>\n    );\n}\n\n\n\nexport default Dialogs;\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../redux/store';\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nfunction withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\nexport default withAuthRedirect;","import {DialogsInitialStateType, sendMessageAC} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {compose, Dispatch} from 'redux';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport React from 'react';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsInitialStateType;\r\n}\r\ntype MapDispatchToPropsType = {\r\n    onSendMessage: (value: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        onSendMessage(value: string) {\r\n            dispatch(sendMessageAC(value))\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs)","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './Sidebar.module.css';\nimport {FriendsType, SidebarType} from '../../redux/sidebar-reducer';\nimport {SidebarPropsType} from './SidebarContainer';\n\n\nconst Sidebar: React.FC<SidebarPropsType> = (props) => {\n    return (\n        <aside className={s.sidebar}>\n            <nav >\n                <ul>\n                    <li><NavLink to={'/profile'} activeClassName={s.active}>Profile</NavLink></li>\n                    <li><NavLink to={'/dialogs'} activeClassName={s.active}>Messages</NavLink></li>\n                    <li><NavLink to={'/users'} activeClassName={s.active}>Users</NavLink></li>\n                </ul>\n            </nav>\n            <SidebarFriendsBlock friends={props.sidebar.friends}/>\n        </aside>\n    )\n}\n\nconst SidebarFriendsBlock: React.FC<SidebarType> = (props) => {\n\n    const friendItem = props.friends.map(friend => <Friend key={friend.id} id={friend.id} name={friend.name}/>)\n\n    return (\n        <div>\n            <h3>Friends</h3>\n            <div className={s.friendBlock}>\n                {friendItem}\n            </div>\n        </div>\n    )\n}\n\nconst Friend: React.FC<FriendsType> = (props) => {\n    return (\n        <div className={s.friend}>\n            <div className={s.imgProfilePhoto}/>\n            <p className={s.name}>{props.name}</p>\n        </div>\n    )\n}\n\nexport default Sidebar;\n","import Sidebar from './Sidebar';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {connect} from 'react-redux';\r\nimport { SidebarType } from '../../redux/sidebar-reducer';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    sidebar: SidebarType\r\n}\r\ntype MapDispatchToPropsType = {}\r\n\r\nexport type SidebarPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        sidebar: state.sidebar\r\n    }\r\n}\r\nconst mapDispatchToProps = () => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport const SidebarContainer = connect(mapStateToProps, mapDispatchToProps)(Sidebar)","export default __webpack_public_path__ + \"static/media/userPhoto.b89021c6.png\";","import React from 'react';\r\nimport userPhoto from '../../assets/images/userPhoto.png'\r\nimport styles from './UsersContainer.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {ResponseItemType} from '../../API/api';\r\n\r\ntype PropsType = {\r\n    users: ResponseItemType[]\r\n    totalCount: number,\r\n    pageSize: number\r\n    currentPage: number\r\n    followingInProgress: number[]\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    onPageChanged: (page: number) => void\r\n}\r\n\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n    const UsersEl = props.users.map((u) => {\r\n        return (\r\n            <div key={u.id}>\r\n                <div>\r\n                    <NavLink to={`profile/${u.id}`}><img src={u.photos.small !== null ? u.photos.small : userPhoto}\r\n                                                         className={styles.userPhoto} alt={'Avatar'}/></NavLink>\r\n                </div>\r\n                <div>\r\n                    {u.followed\r\n                        ? <button disabled={props.followingInProgress.some((id: number) => id === u.id)}\r\n                                  onClick={() => {props.unfollow(u.id)}}>Unfollow</button>\r\n\r\n                        : <button disabled={props.followingInProgress.some((id: number) => id === u.id)}\r\n                                  onClick={() => {props.follow(u.id)}}>Follow</button>}\r\n                </div>\r\n                <div>\r\n                    <div>{u.name}</div>\r\n                    <div>{u.status}</div>\r\n                </div>\r\n                <div>\r\n                    <div>{'u.location.country'}</div>\r\n                    <div>{'u.location.city'}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    // let pagesCount = Math.ceil(props.totalCount / props.pageSize)\r\n    const pages = []\r\n\r\n    for (let i = 1; i <= 30; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return <>\r\n\r\n        <div>\r\n            {pages.map(page => {\r\n                return <span\r\n                    key={page}\r\n                    className={props.currentPage === page ? styles.selectedPage : ''}\r\n                    onClick={() => {\r\n                        props.onPageChanged(page)\r\n                    }}\r\n                >{page} </span>\r\n            })}\r\n            {UsersEl}\r\n        </div>\r\n    </>\r\n}","import React from 'react'\r\nimport styles from './Preloader.module.css'\r\n\r\n\r\n\r\nexport const Preloader = () => {\r\n    return <>\r\n            <div className={styles.ldsHourglass}/>\r\n    </>\r\n}","import React from 'react';\r\nimport {Users} from './Users';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {\r\n    follow,\r\n    getUsers,\r\n    setCurrentPage,\r\n    unfollow,\r\n    UsersInitialStatePropsType\r\n} from '../../redux/users-reducer';\r\nimport {Preloader} from '../common/Preloader/Preloader';\r\n\r\n\r\nexport class UsersContainerAPI extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (page: number) => {\r\n        this.props.getUsers(page, this.props.pageSize)\r\n        this.props.setCurrentPage(page)\r\n    }\r\n\r\n    onFollow = (id: number) => {\r\n        this.props.follow(id)\r\n    }\r\n    onUnFollow = (id: number) => {\r\n        this.props.unfollow(id)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching && <Preloader/>}\r\n            <Users users={this.props.users}\r\n                   currentPage={this.props.currentPage}\r\n                   pageSize={this.props.pageSize}\r\n                   totalCount={this.props.totalCount}\r\n                   onPageChanged={this.onPageChanged}\r\n                   follow={this.onFollow}\r\n                   unfollow={this.onUnFollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    users: UsersInitialStatePropsType[]\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalCount: state.usersPage.totalCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n    }\r\n}\r\n\r\nconst connector = connect(mapStateToProps, {\r\n    setCurrentPage,\r\n    getUsers,\r\n    follow,\r\n    unfollow\r\n})\r\n\r\nexport type UsersPropsType = ConnectedProps<typeof connector>\r\n\r\nexport default connector(UsersContainerAPI)","import React from 'react';\r\n\r\ntype PropsType = {\r\n    title: string\r\n    onChange: (value: string) => void\r\n}\r\n\r\nclass EditableSpan extends React.Component<PropsType> {\r\n    state = {\r\n        editMode: false,\r\n        title: this.props.title,\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            editMode: true,\r\n        })\r\n    }\r\n    DeactivateEditMode = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            editMode: false,\r\n        })\r\n        this.props.onChange(this.state.title)\r\n    }\r\n\r\n    onChange = (e: any) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (prevProps.title !== this.state.title) {\r\n            this.setState({\r\n                title: this.props.title\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode && <div>\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.title || 'Status is not defined'}</span>\r\n                </div>}\r\n                {this.state.editMode && <div>\r\n                    <input\r\n                        type={'text'}\r\n                        value={this.state.title}\r\n                        onBlur={this.DeactivateEditMode}\r\n                        onChange={this.onChange}\r\n                        autoFocus\r\n                    />\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditableSpan;","import React from 'react';\r\nimport styles from './ProfileData.module.css'\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport defaultUserPhoto from '../../../assets/images/userPhoto.png'\r\nimport EditableSpan from '../../common/EditableSpan/EditableSpan';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nconst ProfileData = (props: PropsType) => {\r\n    const {profile} = props\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={styles.profileData}>\r\n            <img src={profile.photos.small ? profile.photos.small : defaultUserPhoto} alt=\"profile avatar\"/>\r\n            <div>\r\n                <h3>{profile.fullName}</h3>\r\n            </div>\r\n\r\n            <EditableSpan title={props.status} onChange={props.updateStatus}/>\r\n\r\n            {profile.aboutMe && <div>\r\n                <h3>About me:</h3>\r\n                <span>{profile.aboutMe}</span>\r\n            </div>}\r\n            <div>\r\n                <h3>My contacts:</h3>\r\n                <ProfileContacts contacts={profile.contacts}/>\r\n            </div>\r\n            {profile.lookingForAJob && <div>\r\n                <h3>Ищу работу</h3>\r\n                {profile.lookingForAJobDescription}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData;\r\n\r\ntype ProfileContactsType = {\r\n    contacts: {\r\n        'facebook': string | null\r\n        'website': string | null\r\n        'vk': string | null\r\n        'twitter': string | null\r\n        'instagram': string | null\r\n        'youtube': string | null\r\n        'github': string | null\r\n        'mainLink': string | null\r\n    }\r\n}\r\n\r\nconst ProfileContacts = (props: ProfileContactsType) => {\r\n\r\n    const netWork = Object.keys(props.contacts)\r\n    const netWorkLinks = Object.values(props.contacts)\r\n\r\n    netWork.map(key => (<div>{key}</div>))\r\n\r\n    return (\r\n        <div className={styles.wrapperContacts}>\r\n\r\n            <div className={styles.contacts}>{netWork.map(key => {\r\n                return (\r\n                    <div>\r\n                        {key}\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n\r\n            <div className={styles.contacts}>{netWorkLinks.map(value => {\r\n                return (\r\n                    <div>\r\n                        {value ? value : 'Не заполнено'}\r\n                    </div>\r\n                )\r\n            })\r\n            }</div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\nimport {PostType} from '../../../../redux/profile-reducer';\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://d13ezvd6yrslxm.cloudfront.net/wp/wp-content/images/avatar-2-story.jpg\"\r\n                 alt=\"Logo with Profile\"/>\r\n            <p>{props.message}</p>\r\n            <p>Like {props.likesCount}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLength, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\n\r\n\r\nexport type NewPostFormDataType = {\r\n    pastText: string\r\n}\r\ntype Props = {}\r\n\r\nconst maxLength10 = maxLength(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<NewPostFormDataType, Props>> = props => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={'pastText'}\r\n                    placeHolder={'Enter new post'}\r\n                    validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst NewPostReduxForm = reduxForm<NewPostFormDataType>({form: 'profileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport default NewPostReduxForm;","import {addPostActionCreator, PostType} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/store';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostType>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost(newPostText: string) {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport AddNewPostForm, {NewPostFormDataType} from './AddNewPostForm';\r\n\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    const postsElements = props.posts.map(post =>\r\n        <Post\r\n            key={post.id}\r\n            id={post.id}\r\n            message={post.message}\r\n            likesCount={post.likesCount}/>)\r\n\r\n    const onAddPost = (formData: NewPostFormDataType) => {\r\n        props.addPost(formData.pastText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Posts</h3>\r\n            <div className={s.new_post}>\r\n                <AddNewPostForm onSubmit={onAddPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileData from './ProfileData/ProfileData';\r\nimport {MyPostsContainer} from './Posts/MyPostsContainer';\r\nimport {ProfilePropsType} from './ProfileContainer';\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            {/*<ProfileLogo />*/}\r\n            <ProfileData\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\nimport Profile from './Profile';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {authInitialStatePropsType} from '../../redux/auth-reducer';\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n// Component own properties\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.auth.id ? this.props.auth.id.toString() : ''\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props}\r\n                        profile={this.props.profile}\r\n                        status={this.props.status}\r\n                        updateStatus={this.props.updateStatus}\r\n        />\r\n    }\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    auth: authInitialStatePropsType\r\n}\r\nexport type ProfilePropsType = ConnectedProps<typeof connector>;\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        auth: state.auth\r\n    }\r\n}\r\n\r\n\r\nconst connector = connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connector,\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport s from './Header.module.css';\nimport { NavLink } from 'react-router-dom';\nimport {HeaderPropsType} from './HeaderContainer';\n\nexport const Header = (props: HeaderPropsType) => {\n  return (\n    <header className={s.header}>\n        <img src={logo} alt=\"\"/>\n\n        <div className={s.loginBlock}>\n            {props.isAuth\n                ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\n                : <NavLink to={'/Login'}>Login</NavLink> }\n\n        </div>\n    </header>\n  );\n}\n","import React from 'react';\nimport {Header} from './Header';\nimport {connect, ConnectedProps} from 'react-redux';\nimport {getAuthUserData, logout} from '../../redux/auth-reducer';\nimport {AppStateType} from '../../redux/store';\n\nexport class HeaderContainer extends React.Component<HeaderPropsType> {\n    componentDidMount() {\n        this.props.getAuthUserData()\n    }\n\n    render() {\n        return (<Header {...this.props}/>);\n    }\n}\n\ntype MapStateToProps = {\n    isAuth: boolean\n    login: string | null\n}\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login,\n    }\n}\n\nconst connector = connect(mapStateToProps, {\n    getAuthUserData,\n    logout,\n})\nexport default connector(HeaderContainer);\n\n// Types\nexport type HeaderPropsType = ConnectedProps<typeof connector>;\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../common/FormsControls/FormsControls';\r\nimport {required} from '../../utils/validators/validators';\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ninterface Props {}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps <FormDataType, Props>> = props => {\r\n    return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field component={Input}\r\n                           name={'email'}\r\n                           placeholder={'Email'}\r\n                           validate={required}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Field component={Input}\r\n                           name={'password'}\r\n                           placeholder={'Password'}\r\n                           type={'password'}\r\n                           validate={required}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Field component={Input}\r\n                           name={'rememberMe'}\r\n                           type={'checkbox'}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button>Login</button>\r\n                </div>\r\n            </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'Login'}) (LoginForm)\r\n\r\nexport default LoginReduxForm;","import React from 'react';\r\nimport LoginReduxForm, {FormDataType} from './LoginForm';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../../redux/store';\r\n\r\nconst LoginPage: React.FC<Props> = props => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        const {email, password, rememberMe} = formData\r\n        props.login(email, password, rememberMe)\r\n    }\r\n\r\n    if(props.isAuth.isAuth) {\r\n        return <Redirect to={`/profile/${props.isAuth.id}`} />\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <div>{props.isAuth.error}</div>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth\r\n})\r\nconst connector = connect(mapStateToProps, {login})\r\n\r\nexport default connector(LoginPage)\r\n\r\n// Types\r\ntype Props = ConnectedProps<typeof connector>\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Route} from 'react-router-dom';\r\nimport DialogsContainer from './Components/Dialogs/DialogsContainer';\r\nimport {SidebarContainer} from './Components/Sidebar/SidebarContainer';\r\nimport UsersContainer from './Components/Users/UsersContainer';\r\nimport ProfileContainer from './Components/Profile/ProfileContainer';\r\nimport HeaderContainer from './Components/Header/HeaderContainer';\r\nimport LoginPage from './Components/Login/LoginPage';\r\n\r\nconst App = () => {\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"app_wrapper\">\r\n                <HeaderContainer />\r\n                <SidebarContainer/>\r\n                <div className={'app_wrapper_content'}>\r\n                    <Route path=\"/login\" render={() => <LoginPage/>}/>\r\n                    <Route path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\r\n\r\n                    <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\r\n                    <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n                </div>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from './redux/store';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n\r\n    </React.StrictMode>, document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileData\":\"ProfileData_profileData__3_er9\",\"wrapperContacts\":\"ProfileData_wrapperContacts__2yaPx\",\"contacts\":\"ProfileData_contacts__22veH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1qs7u\",\"posts\":\"MyPosts_posts__tbkbY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-control\":\"Textarea_form-control__1DGDK\",\"error\":\"Textarea_error__1RoG6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"UsersContainer_userPhoto__1HjXU\",\"selectedPage\":\"UsersContainer_selectedPage__2syrM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2x0-v\",\"loginBlock\":\"Header_loginBlock__1i9Ib\"};"],"sourceRoot":""}