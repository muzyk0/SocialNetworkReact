{"version":3,"sources":["Components/common/FormsControls/FormsControls.module.css","Components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","Components/Dialogs/Dialogs.module.css","Components/Dialogs/DialogItem/DialogsItem.tsx","Components/Dialogs/Messages/Message.tsx","Components/Dialogs/AddMessageForm.tsx","Components/Dialogs/Dialogs.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","hoc/withAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","FormControl","props","meta","children","hasError","touched","error","className","styles","formControl","Textarea","input","Input","required","value","maxLength","max","length","DialogItem","path","id","s","dialog","to","activeClassName","active","name","Message","message","maxLength100","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","placeHolder","validate","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","messagesElements","messages","dialogsItems","formData","onSendMessage","newMessageBody","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","mapStateToPropsForRedirect","isAuth","auth","withAuthRedirect","Component","connect","restProps","compose","dispatch","sendMessageAC"],"mappings":"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","file":"static/js/5.db78a0b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-control\":\"FormsControls_form-control__JGxNj\",\"error\":\"FormsControls_error__PAzfS\",\"formSummaryError\":\"FormsControls_formSummaryError__5MlPU\"};","import React from 'react';\r\nimport styles from './FormsControls.module.css'\r\nimport {WrappedFieldsProps} from 'redux-form';\r\n\r\nconst FormControl: React.FC<any> = (props) => {\r\n    const {meta, children} = props\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={`${styles.formControl} ${hasError && styles.error} `}>\r\n\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldsProps> = (props) => {\r\n    const {input} = props\r\n    return <FormControl {...props}>\r\n        <textarea {...input} {...props}/>\r\n    </FormControl>\r\n};\r\nexport const Input: React.FC<WrappedFieldsProps> = (props) => {\r\n    const {input} = props\r\n    return <FormControl {...props}>\r\n        <input {...input} {...props}/>\r\n    </FormControl>\r\n};","export const required = (value: string) => {\r\n    if (value) return undefined\r\n\r\n    return 'Field is required'\r\n}\r\nexport const maxLength = (max: number) => (value: string) => {\r\n    if (value && value.length > max) return `Max length is ${max} symbols`\r\n\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__BRHD6\",\"dialogsItems\":\"Dialogs_dialogsItems__1aH1f\",\"dialog\":\"Dialogs_dialog__1glHE\",\"active\":\"Dialogs_active__3NWs5\",\"messanges\":\"Dialogs_messanges__WVkjx\"};","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './../Dialogs.module.css';\n\ntype dialogItemType = {\n    name: string\n    id: number\n}\n\nconst DialogItem = (props: dialogItemType) => {\n    const path = `/dialogs/${props.id}`\n    return (\n        <div className={`${s.dialog}`}>\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\n        </div>)\n}\n\nexport default DialogItem;\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nexport type MessageItemType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageItemType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLength, required} from '../../utils/validators/validators';\r\nimport {Textarea} from '../common/FormsControls/FormsControls';\r\n\r\nexport type MessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\ninterface Props {\r\n}\r\nconst maxLength100 = maxLength(100)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps <MessageFormDataType, Props>> = props => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={'newMessageBody'}\r\n                    placeHolder={'Enter your message'}\r\n                    validate={[required, maxLength100]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\nconst AddMessageFormRedux = reduxForm<MessageFormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default AddMessageFormRedux;","import React from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogsItem';\nimport Message from './Messages/Message';\nimport {DialogsPropsType} from './DialogsContainer';\nimport AddMessageForm, {MessageFormDataType} from './AddMessageForm';\n\n\nfunction Dialogs(props: DialogsPropsType) {\n\n    const state = props.dialogsPage\n\n    const dialogsElements = state.dialogs.map(dialogs => <DialogItem key={dialogs.id}\n                                                                     name={dialogs.name}\n                                                                     id={dialogs.id}/>)\n\n    const messagesElements = state.messages.map(message => <Message key={message.id}\n                                                                    message={message.message}/>)\n\n    const addNewMessage = (formData: MessageFormDataType) => {\n        props.onSendMessage(formData.newMessageBody)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n                <AddMessageForm onSubmit={addNewMessage}/>\n            </div>\n\n        </div>\n    );\n}\n\n\n\nexport default Dialogs;\n","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../redux/store';\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nfunction withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\nexport default withAuthRedirect;","import {DialogsInitialStateType, sendMessageAC} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {compose, Dispatch} from 'redux';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport React from 'react';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsInitialStateType;\r\n}\r\ntype MapDispatchToPropsType = {\r\n    onSendMessage: (value: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        onSendMessage(value: string) {\r\n            dispatch(sendMessageAC(value))\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs)"],"sourceRoot":""}