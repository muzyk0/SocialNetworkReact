{"version":3,"sources":["Components/common/FormsControls/FormsControls.module.css","Components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","Components/Login/LoginForm.tsx","Components/Login/LoginPage.tsx"],"names":["module","exports","FormControl","props","meta","children","hasError","touched","error","className","styles","formControl","Textarea","input","Input","required","value","maxLength","max","length","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","component","name","placeholder","validate","type","formSummaryError","connector","connect","state","isAuth","auth","login","to","id","formData","email","password","rememberMe"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,eAAe,oCAAoC,MAAQ,6BAA6B,iBAAmB,0C,gJCGvHC,EAA6B,SAACC,GAChC,IAAOC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,SACPC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACI,sBAAKC,UAAS,UAAKC,IAAOC,YAAZ,YAA2BL,GAAYI,IAAOF,MAA9C,KAAd,UAEI,8BACKH,IAEJC,GAAY,+BAAOF,EAAKI,YAKxBI,EAAyC,SAACT,GACnD,IAAOU,EAASV,EAATU,MACP,OAAO,cAACX,EAAD,2BAAiBC,GAAjB,aACH,oDAAcU,GAAWV,QAGpBW,EAAsC,SAACX,GAChD,IAAOU,EAASV,EAATU,MACP,OAAO,cAACX,EAAD,2BAAiBC,GAAjB,aACH,iDAAWU,GAAWV,S,iCC3B9B,oEAAO,IAAMY,EAAW,SAACC,GACrB,IAAIA,EAEJ,MAAO,qBAEEC,EAAY,SAACC,GAAD,OAAiB,SAACF,GACvC,GAAIA,GAASA,EAAMG,OAASD,EAAK,MAAM,iBAAN,OAAwBA,EAAxB,e,8GCiDtBE,EAFQC,YAAwB,CAACC,KAAM,SAA/BD,EAtC6C,SAAAlB,GAChE,IACIoB,EAEApB,EAFAoB,aACAf,EACAL,EADAK,MAEJ,OACI,uBAAMgB,SAAUD,EAAhB,UACI,8BACI,cAACE,EAAA,EAAD,CAAOC,UAAWZ,IACXa,KAAM,QACNC,YAAa,QACbC,SAAUd,QAGrB,8BACI,cAACU,EAAA,EAAD,CAAOC,UAAWZ,IACXa,KAAM,WACNC,YAAa,WACbE,KAAM,WACND,SAAUd,QAGrB,8BACI,cAACU,EAAA,EAAD,CAAOC,UAAWZ,IACXa,KAAM,aACNG,KAAM,eAGhBtB,GAAS,qBAAKC,UAAWC,IAAOqB,iBAAvB,SACLvB,IAEL,8BACI,mD,uBCnBVwB,EAAYC,aAHM,SAACC,GAAD,MAA0B,CAC9CC,OAAQD,EAAME,QAEyB,CAACC,YAE7BL,aAvBoB,SAAA7B,GAO/B,OAAGA,EAAMgC,OAAOA,OACL,cAAC,IAAD,CAAUG,GAAE,mBAAcnC,EAAMgC,OAAOI,MAG9C,gCACI,uCACA,8BAAMpC,EAAMgC,OAAO3B,QACnB,cAAC,EAAD,CAAgBgB,SAZP,SAACgB,GACd,IAAOC,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,SAAUC,EAAcH,EAAdG,WACxBxC,EAAMkC,MAAMI,EAAOC,EAAUC","file":"static/js/6.573841a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-control\":\"FormsControls_form-control__JGxNj\",\"error\":\"FormsControls_error__PAzfS\",\"formSummaryError\":\"FormsControls_formSummaryError__5MlPU\"};","import React from 'react';\r\nimport styles from './FormsControls.module.css'\r\nimport {WrappedFieldsProps} from 'redux-form';\r\n\r\nconst FormControl: React.FC<any> = (props) => {\r\n    const {meta, children} = props\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={`${styles.formControl} ${hasError && styles.error} `}>\r\n\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldsProps> = (props) => {\r\n    const {input} = props\r\n    return <FormControl {...props}>\r\n        <textarea {...input} {...props}/>\r\n    </FormControl>\r\n};\r\nexport const Input: React.FC<WrappedFieldsProps> = (props) => {\r\n    const {input} = props\r\n    return <FormControl {...props}>\r\n        <input {...input} {...props}/>\r\n    </FormControl>\r\n};","export const required = (value: string) => {\r\n    if (value) return undefined\r\n\r\n    return 'Field is required'\r\n}\r\nexport const maxLength = (max: number) => (value: string) => {\r\n    if (value && value.length > max) return `Max length is ${max} symbols`\r\n\r\n    return undefined\r\n}","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../common/FormsControls/FormsControls';\r\nimport {required} from '../../utils/validators/validators';\r\nimport styles from '../common/FormsControls/FormsControls.module.css'\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ninterface Props {\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, Props>> = props => {\r\n    const {\r\n        handleSubmit,\r\n        error\r\n    } = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field component={Input}\r\n                       name={'email'}\r\n                       placeholder={'Email'}\r\n                       validate={required}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field component={Input}\r\n                       name={'password'}\r\n                       placeholder={'Password'}\r\n                       type={'password'}\r\n                       validate={required}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field component={Input}\r\n                       name={'rememberMe'}\r\n                       type={'checkbox'}\r\n                />\r\n            </div>\r\n            {error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'Login'})(LoginForm)\r\n\r\nexport default LoginReduxForm;","import React from 'react';\r\nimport LoginReduxForm, {FormDataType} from './LoginForm';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../../redux/store';\r\n\r\nconst LoginPage: React.FC<Props> = props => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        const {email, password, rememberMe} = formData\r\n        props.login(email, password, rememberMe)\r\n    }\r\n\r\n    if(props.isAuth.isAuth) {\r\n        return <Redirect to={`/profile/${props.isAuth.id}`} />\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <div>{props.isAuth.error}</div>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth\r\n})\r\nconst connector = connect(mapStateToProps, {login})\r\n\r\nexport default connector(LoginPage)\r\n\r\n// Types\r\ntype Props = ConnectedProps<typeof connector>\r\n"],"sourceRoot":""}