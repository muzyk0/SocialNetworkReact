{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Sidebar/Sidebar.module.css","Components/Profile/ProfileData/ProfileData.module.css","Components/Profile/Posts/MyPosts.module.css","Components/Users/UsersContainer.module.css","Components/Header/Header.module.css","Components/common/Preloader/Preloader.module.css","Components/Profile/Profile.module.css","Components/Profile/Posts/Post/Post.module.css","redux/profile-reducer.ts","reportWebVitals.ts","API/api.ts","redux/users-reducer.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/auth-reducer.ts","redux/store.ts","Components/Dialogs/DialogItem/DialogsItem.tsx","Components/Dialogs/Messages/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Sidebar/Sidebar.tsx","Components/Sidebar/SidebarContainer.tsx","assets/images/userPhoto.png","Components/Users/Users.tsx","Components/common/Preloader/Preloader.tsx","Components/Users/UsersContainer.tsx","Components/Profile/ProfileData/ProfileData.tsx","Components/Profile/Posts/Post/Post.tsx","Components/Profile/Posts/MyPostsContainer.tsx","Components/Profile/Posts/MyPosts.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","Components/Header/logo.svg","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","App.tsx","index.tsx"],"names":["module","exports","PROFILE_ACTION_TYPE","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","get","response","data","id","post","delete","userId","authAPI","USERS_ACTIONS","initialState","newPostText","posts","message","likesCount","profile","SEND_MESSAGE","UPDATE_NEW_MESSAGE_BODY","newMessageBody","dialogs","name","messages","friends","users","totalCount","isFetching","followingInProgress","toggleIsFetching","type","TOGGLE_IS_FETCHING","toggleFollowingProgress","isFollow","TOGGLE_IS_FOLLOWING_IN_PROGRESS","login","email","isAuth","rootReducer","combineReducers","profilePage","state","action","ADD_POST","newPost","Date","getTime","trimmedText","UPDATE_NEW_POST_TEXT","newText","SET_USER_PROFILE","dialogsPage","newMessage","trim","body","sidebar","usersPage","FOLLOW","map","u","userID","followed","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","filter","auth","SET_USER_DATA","payload","store","createStore","composeWithDevTools","applyMiddleware","thunk","DialogItem","props","path","className","s","dialog","to","activeClassName","active","Message","Dialogs","dialogsElements","messagesElements","dialogsItems","placeholder","value","onChange","e","messageText","currentTarget","updateNewMessageBody","onClick","onSendMessage","DialogsContainer","connect","dispatch","SidebarFriendsBlock","friendItem","friend","friendBlock","Friend","imgProfilePhoto","Sidebar","SidebarContainer","Users","UsersEl","src","photos","small","userPhoto","styles","alt","disabled","some","unfollow","follow","status","pages","i","push","page","selectedPage","onPageChanged","Preloader","ldsHourglass","UsersContainerAPI","getUsers","setCurrentPage","onFollow","onUnFollow","this","React","Component","connector","items","resultCode","ProfileData","profileData","defaultUserPhoto","fullName","aboutMe","contacts","lookingForAJob","lookingForAJobDescription","ProfileContacts","netWork","Object","keys","netWorkLinks","values","key","wrapperContacts","Post","item","MyPostsContainer","addPost","updateNewPostText","text","postText","postsElements","postsBlock","new_post","Profile","ProfileContainer","match","params","getUserProfile","WithUrlDataContainerComponent","withRouter","Header","header","logo","loginBlock","HeaderContainer","getAuthUserData","setAuthUserData","App","render","UsersContainer","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4fafa683.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__BRHD6\",\"dialogsItems\":\"Dialogs_dialogsItems__1aH1f\",\"dialog\":\"Dialogs_dialog__1glHE\",\"active\":\"Dialogs_active__3NWs5\",\"messanges\":\"Dialogs_messanges__WVkjx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__13B6p\",\"active\":\"Sidebar_active__2WsD6\",\"friendBlock\":\"Sidebar_friendBlock__2oXRU\",\"friend\":\"Sidebar_friend__3Y_SH\",\"name\":\"Sidebar_name__2Hl5y\",\"imgProfilePhoto\":\"Sidebar_imgProfilePhoto__1UA-e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileData\":\"ProfileData_profileData__3_er9\",\"wrapperContacts\":\"ProfileData_wrapperContacts__2yaPx\",\"contacts\":\"ProfileData_contacts__22veH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1qs7u\",\"posts\":\"MyPosts_posts__tbkbY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"UsersContainer_userPhoto__1HjXU\",\"selectedPage\":\"UsersContainer_selectedPage__2syrM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2x0-v\",\"loginBlock\":\"Header_loginBlock__1i9Ib\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__3XCPk\",\"ldsHourglass\":\"Preloader_ldsHourglass__pzUo-\",\"lds-hourglass\":\"Preloader_lds-hourglass__1hkv0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__CiwxZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2q3Eb\"};","import {Dispatch} from 'redux';\r\nimport {usersAPI} from '../API/api';\r\n\r\nexport enum PROFILE_ACTION_TYPE {\r\n    ADD_POST = 'ADD-POST',\r\n    UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT',\r\n    SET_USER_PROFILE = 'SET_PROFILE_INFO-NEW-POST-TEXT',\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfileType = {\r\n    'aboutMe': string | null\r\n    'contacts': {\r\n        'facebook': string | null\r\n        'website': string | null\r\n        'vk': string | null\r\n        'twitter': string | null\r\n        'instagram': string | null\r\n        'youtube': string | null\r\n        'github': string | null\r\n        'mainLink': string | null\r\n    },\r\n    'lookingForAJob': string | null\r\n    'lookingForAJobDescription': string | null\r\n    'fullName': string | null\r\n    'userId': number\r\n    'photos': {\r\n        'small': string | null\r\n        'large': string | null\r\n    }\r\n}\r\nconst initialState = {\r\n    newPostText: '',\r\n    posts: [\r\n        {\r\n            id: 1,\r\n            message: 'Good this site',\r\n            likesCount: 10\r\n        },\r\n        {\r\n            id: 2,\r\n            message: 'Good this site',\r\n            likesCount: 10\r\n        }\r\n    ] as PostType[],\r\n    profile: null as ProfileType | null,\r\n}\r\n\r\nexport type ProfileReducerInitialStateType = typeof initialState\r\n\r\n\r\nexport const profileReducer = (state: ProfileReducerInitialStateType = initialState, action: ActionsType): ProfileReducerInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case PROFILE_ACTION_TYPE.ADD_POST:\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            }\r\n            const trimmedText = newPost.message\r\n            if (trimmedText) {\r\n                return {\r\n                    ...state,\r\n                    posts: [...state.posts, newPost],\r\n                    newPostText: ''\r\n                }\r\n            }\r\n\r\n            return state\r\n        case PROFILE_ACTION_TYPE.UPDATE_NEW_POST_TEXT:\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n        case PROFILE_ACTION_TYPE.SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof addPostActionCreator>\r\n    | ReturnType<typeof updateNewPostTextAC>\r\n    | ReturnType<typeof setUserProfile>\r\n\r\n// Action Creators\r\nexport const addPostActionCreator = () => {\r\n    return {type: PROFILE_ACTION_TYPE.ADD_POST} as const\r\n}\r\nexport const updateNewPostTextAC = (postText: string) => {\r\n    return {type: PROFILE_ACTION_TYPE.UPDATE_NEW_POST_TEXT, newText: postText} as const\r\n}\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {type: PROFILE_ACTION_TYPE.SET_USER_PROFILE, profile} as const\r\n}\r\n\r\n// Thunk Creator\r\ntype ResponseType = {\r\n    data: ProfileType\r\n}\r\nexport const getUserProfile = (userId: string) => (dispatch: Dispatch) => {\r\n    usersAPI.getProfile(userId)\r\n        .then((response: ResponseType) => {\r\n            dispatch(setUserProfile(response.data))\r\n        })\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\r\n\r\nexport type ResponseItemType = {\r\n    'name': string\r\n    'id': number\r\n    'uniqueUrlName': null | string\r\n    'photos': {\r\n        'small': null | string\r\n        'large': null | string\r\n    },\r\n    'status': null | string\r\n    'followed': boolean\r\n}\r\nexport type ServerData = {\r\n    'items': ResponseItemType[]\r\n    'totalCount': number\r\n    'error': null | string\r\n}\r\ntype ResponseType = {\r\n    data: ServerData\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '458be47a-15a2-43bc-bb9e-a21974e6a059'\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers: (currentPage: number = 1, pageSize: number = 10) => {\r\n        return instance.get<ServerData>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then((response: ResponseType) => response.data)\r\n    },\r\n    follow: (id: number = 2) => {\r\n        return instance.post(`follow/${id}`)\r\n            .then((response) => response.data)\r\n    },\r\n    unfollow: (id: number = 2) => {\r\n        return instance.delete(`follow/${id}`)\r\n            .then((response) => response.data)\r\n    },\r\n    getProfile: (userId: string) => {\r\n        return instance.get(`profile/${userId}`)\r\n    }\r\n}\r\nexport const authAPI = {\r\n    me: () => {\r\n        return instance.get(`auth/me`)\r\n    },\r\n}\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {usersAPI} from '../API/api';\r\n\r\nexport enum USERS_ACTIONS {\r\n    FOLLOW = 'FOLLOW',\r\n    UNFOLLOW = 'UNFOLLOW',\r\n    SET_USERS = 'SET_USERS',\r\n    SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',\r\n    SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT',\r\n    TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING',\r\n    TOGGLE_IS_FOLLOWING_IN_PROGRESS = 'TOGGLE_IS_FOLLOWING_IN_PROGRESS',\r\n}\r\n\r\n\r\nexport type UsersInitialStatePropsType = {\r\n    'name': string\r\n    'id': number\r\n    'uniqueUrlName': string | null\r\n    'photos': {\r\n        'small': string | null\r\n        'large': string | null\r\n    },\r\n    'status': string | null\r\n    'followed': boolean\r\n}\r\n\r\nexport type UsersInitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    users: [] as UsersInitialStatePropsType[],\r\n    pageSize: 10,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as number[]\r\n}\r\n\r\nexport const usersReducer = (state: UsersInitialStateType = initialState, action: ActionsType): UsersInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case USERS_ACTIONS.FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case USERS_ACTIONS.UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case USERS_ACTIONS.SET_USERS:\r\n            return {...state, users: [...action.users]}\r\n        case USERS_ACTIONS.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case USERS_ACTIONS.SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalCount: action.totalCount}\r\n        case USERS_ACTIONS.TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case USERS_ACTIONS.TOGGLE_IS_FOLLOWING_IN_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFollow\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : [...state.followingInProgress.filter(id => id !== action.userId)]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport type ActionsType = ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\n\r\n// Action Creators\r\nexport const followSuccess = (userID: number) => {\r\n    return {type: USERS_ACTIONS.FOLLOW, userID} as const\r\n}\r\nexport const unfollowSuccess = (userID: number) => {\r\n    return {type: USERS_ACTIONS.UNFOLLOW, userID} as const\r\n}\r\nexport const setUsers = (users: UsersInitialStatePropsType[]) => {\r\n    return {type: USERS_ACTIONS.SET_USERS, users} as const\r\n}\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {type: USERS_ACTIONS.SET_CURRENT_PAGE, currentPage} as const\r\n}\r\nexport const setTotalUsersCount = (totalCount: number) => {\r\n    return {type: USERS_ACTIONS.SET_TOTAL_USERS_COUNT, totalCount} as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {type: USERS_ACTIONS.TOGGLE_IS_FETCHING, isFetching} as const\r\n}\r\nexport const toggleFollowingProgress = (isFollow: boolean, userId: number) => {\r\n    return {type: USERS_ACTIONS.TOGGLE_IS_FOLLOWING_IN_PROGRESS, isFollow, userId} as const\r\n}\r\n\r\n// Thunk Creator\r\nexport const getUsers = (currentPage: number, pageSize: number) => (dispatch: Dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    usersAPI.getUsers(currentPage, pageSize)\r\n        .then((data) => {\r\n            dispatch(toggleIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        })\r\n}\r\nexport const follow = (userId: number) => (dispatch: Dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    usersAPI.follow(userId)\r\n        .then((data) => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(followSuccess(userId))\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            }\r\n        })\r\n}\r\nexport const unfollow = (userId: number) => (dispatch: Dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    usersAPI.unfollow(userId)\r\n        .then((data) => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(unfollowSuccess(userId))\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            }\r\n        })\r\n}","\r\nexport const SEND_MESSAGE = 'SEND-MESSAGE'\r\nexport const UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_DIALOG_MESSAGE'\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\n\r\ntype DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst initialState = {\r\n    newMessageBody: '',\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych',},\r\n        {id: 2, name: 'Nasty',},\r\n        {id: 3, name: 'Vova',},\r\n        {id: 4, name: 'Viktor',},\r\n        {id: 5, name: 'Olya',},\r\n    ] as DialogsType[],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'Dimych'},\r\n    ] as MessageType[]\r\n}\r\n\r\nexport type DialogsInitialStateType = typeof initialState\r\n\r\n/*export type AddMessageActionType = ReturnType<typeof sendMessageAC>\r\nexport type UpdateNewDialogMessageActionType = ReturnType<typeof updateNewMessageBodyAC>*/\r\n\r\ntype ActionsType = ReturnType<typeof sendMessageAC> | ReturnType<typeof updateNewMessageBodyAC>\r\n\r\nexport const sendMessageAC = () => {\r\n    return {type: SEND_MESSAGE} as const\r\n}\r\nexport const updateNewMessageBodyAC = (messageText: string) => {\r\n    return {type: UPDATE_NEW_MESSAGE_BODY, body: messageText} as const\r\n}\r\n\r\nexport const dialogsReducer = (state: DialogsInitialStateType = initialState, action: ActionsType): DialogsInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            const newMessage: MessageType = {\r\n                id: new Date().getTime(),\r\n                message: state.newMessageBody,\r\n            }\r\n            const trimmedText = state.newMessageBody.trim()\r\n            if (trimmedText) {\r\n                return {\r\n                    ...state,\r\n                    messages: [...state.messages, newMessage],\r\n                    newMessageBody: ''\r\n                }\r\n            }\r\n            return state\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            return {...state, newMessageBody: action.body}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","export type FriendsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type SidebarType = {\r\n    friends: Array<FriendsType>\r\n}\r\n\r\n\r\nconst initialState = {\r\n    friends: [\r\n        {id: 1, name: 'Dimych',},\r\n        {id: 2, name: 'Nasty',},\r\n        {id: 3, name: 'Vova',},\r\n    ] as FriendsType[]\r\n}\r\n\r\nexport type SidebarReducerInitialStateType = typeof initialState\r\n\r\ntype ActionsType = ReturnType<typeof sidebar>\r\n\r\nexport const sidebar = () => {\r\n    return {type: 'test'} as const\r\n}\r\n\r\nexport const sidebarReducer = (state: SidebarReducerInitialStateType = initialState, action: ActionsType): SidebarReducerInitialStateType => {\r\n\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}","import {authAPI} from '../API/api';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport enum USERS_ACTIONS {\r\n    SET_USER_DATA = 'SET_USER_DATA',\r\n}\r\n\r\n\r\nexport type authInitialStatePropsType = {\r\n    id: number | null\r\n    login: string | null\r\n    email: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nconst initialState: authInitialStatePropsType = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false,\r\n}\r\n\r\nexport const authReducer = (state: authInitialStatePropsType = initialState, action: ActionsType): authInitialStatePropsType => {\r\n\r\n    switch (action.type) {\r\n        case USERS_ACTIONS.SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuth: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport type ActionsType = ReturnType<typeof setAuthUserData>\r\n\r\n// Action Creators\r\nexport const setAuthUserData = (id: number, login: string, email: string) => {\r\n    return {\r\n        type: USERS_ACTIONS.SET_USER_DATA,\r\n        payload: {\r\n            id,\r\n            login,\r\n            email\r\n        }\r\n    } as const\r\n}\r\n\r\n// Thunk Creator\r\ntype ResponseType = {\r\n    data: AuthResponseType\r\n}\r\ntype AuthResponseType = {\r\n    data: {\r\n        id: number\r\n        login: string\r\n        email: string\r\n    }\r\n    'messages': [],\r\n    'fieldsErrors': [],\r\n    'resultCode': 0\r\n}\r\n\r\nexport const getAuthUserData = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then((response: ResponseType) => {\r\n            const {id, login, email} = response.data.data\r\n            if (!response.data.resultCode) {\r\n                dispatch(setAuthUserData(id, login, email))\r\n            }\r\n        })\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {profileReducer} from './profile-reducer';\r\nimport {dialogsReducer} from './dialogs-reducer';\r\nimport {sidebarReducer} from './sidebar-reducer';\r\nimport {usersReducer} from './users-reducer';\r\nimport thunk from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport {authReducer} from './auth-reducer';\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './../Dialogs.module.css';\n\ntype dialogItemType = {\n    name: string\n    id: number\n}\n\nconst DialogItem = (props: dialogItemType) => {\n    const path = `/dialogs/${props.id}`\n    return (\n        <div className={`${s.dialog}`}>\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\n        </div>)\n}\n\nexport default DialogItem;\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nexport type MessageItemType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageItemType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent} from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogsItem';\nimport Message from './Messages/Message';\nimport {DialogsPropsType} from './DialogsContainer';\n\n\nfunction Dialogs(props: DialogsPropsType) {\n\n    const state = props.dialogsPage\n\n    const dialogsElements = state.dialogs.map(dialogs => <DialogItem key={dialogs.id}\n                                                                           name={dialogs.name}\n                                                                           id={dialogs.id}/>)\n\n    const messagesElements = state.messages.map(message => <Message key={message.id}\n                                                                          message={message.message}/>)\n    const newMessageBody = state.newMessageBody\n\n\n    const onSendMessageClick = () => {\n        props.onSendMessage()\n    }\n    const onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n\n        const messageText = e.currentTarget.value;\n        props.updateNewMessageBody(messageText)\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n                <div>\n                    <textarea placeholder={'Enter your message'}\n                              value={newMessageBody}\n                              onChange={onNewMessageChange}/>\n                </div>\n                <div>\n                    <button onClick={onSendMessageClick}>Send message</button>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\n\nexport default Dialogs;\n","import {DialogsInitialStateType, sendMessageAC, updateNewMessageBodyAC} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsInitialStateType;\r\n}\r\ntype MapDispatchToPropsType = {\r\n    onSendMessage: () => void\r\n    updateNewMessageBody: (body: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        onSendMessage() {\r\n            dispatch(sendMessageAC())\r\n        },\r\n        updateNewMessageBody(body: string) {\r\n            dispatch(updateNewMessageBodyAC(body))\r\n\r\n        },\r\n    }\r\n}\r\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './Sidebar.module.css';\nimport {FriendsType, SidebarType} from '../../redux/sidebar-reducer';\nimport {SidebarPropsType} from './SidebarContainer';\n\n\nconst Sidebar: React.FC<SidebarPropsType> = (props) => {\n    return (\n        <aside className={s.sidebar}>\n            <nav >\n                <ul>\n                    <li><NavLink to={'/profile'} activeClassName={s.active}>Profile</NavLink></li>\n                    <li><NavLink to={'/dialogs'} activeClassName={s.active}>Messages</NavLink></li>\n                    <li><NavLink to={'/users'} activeClassName={s.active}>Users</NavLink></li>\n                </ul>\n            </nav>\n            <SidebarFriendsBlock friends={props.sidebar.friends}/>\n        </aside>\n    )\n}\n\nconst SidebarFriendsBlock: React.FC<SidebarType> = (props) => {\n\n    const friendItem = props.friends.map(friend => <Friend key={friend.id} id={friend.id} name={friend.name}/>)\n\n    return (\n        <div>\n            <h3>Friends</h3>\n            <div className={s.friendBlock}>\n                {friendItem}\n            </div>\n        </div>\n    )\n}\n\nconst Friend: React.FC<FriendsType> = (props) => {\n    return (\n        <div className={s.friend}>\n            <div className={s.imgProfilePhoto}/>\n            <p className={s.name}>{props.name}</p>\n        </div>\n    )\n}\n\nexport default Sidebar;\n","import Sidebar from './Sidebar';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {connect} from 'react-redux';\r\nimport { SidebarType } from '../../redux/sidebar-reducer';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    sidebar: SidebarType\r\n}\r\ntype MapDispatchToPropsType = {}\r\n\r\nexport type SidebarPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        sidebar: state.sidebar\r\n    }\r\n}\r\nconst mapDispatchToProps = () => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport const SidebarContainer = connect(mapStateToProps, mapDispatchToProps)(Sidebar)","export default __webpack_public_path__ + \"static/media/userPhoto.b89021c6.png\";","import React from 'react';\r\nimport userPhoto from '../../assets/images/userPhoto.png'\r\nimport styles from './UsersContainer.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {ResponseItemType} from '../../API/api';\r\n\r\ntype PropsType = {\r\n    users: ResponseItemType[]\r\n    totalCount: number,\r\n    pageSize: number\r\n    currentPage: number\r\n    followingInProgress: number[]\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    onPageChanged: (page: number) => void\r\n}\r\n\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n    const UsersEl = props.users.map((u) => {\r\n        return (\r\n            <div key={u.id}>\r\n                <div>\r\n                    <NavLink to={`profile/${u.id}`}><img src={u.photos.small !== null ? u.photos.small : userPhoto}\r\n                                                         className={styles.userPhoto} alt={'Avatar'}/></NavLink>\r\n                </div>\r\n                <div>\r\n                    {u.followed\r\n                        ? <button disabled={props.followingInProgress.some((id: number) => id === u.id)}\r\n                                  onClick={() => {props.unfollow(u.id)}}>Unfollow</button>\r\n\r\n                        : <button disabled={props.followingInProgress.some((id: number) => id === u.id)}\r\n                                  onClick={() => {props.follow(u.id)}}>Follow</button>}\r\n                </div>\r\n                <div>\r\n                    <div>{u.name}</div>\r\n                    <div>{u.status}</div>\r\n                </div>\r\n                <div>\r\n                    <div>{'u.location.country'}</div>\r\n                    <div>{'u.location.city'}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    // let pagesCount = Math.ceil(props.totalCount / props.pageSize)\r\n    const pages = []\r\n\r\n    for (let i = 1; i <= 30; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return <>\r\n\r\n        <div>\r\n            {pages.map(page => {\r\n                return <span\r\n                    key={page}\r\n                    className={props.currentPage === page ? styles.selectedPage : ''}\r\n                    onClick={() => {\r\n                        props.onPageChanged(page)\r\n                    }}\r\n                >{page} </span>\r\n            })}\r\n            {UsersEl}\r\n        </div>\r\n    </>\r\n}","import React from 'react'\r\nimport styles from './Preloader.module.css'\r\n\r\n\r\n\r\nexport const Preloader = () => {\r\n    return <>\r\n            <div className={styles.ldsHourglass}/>\r\n    </>\r\n}","import React from 'react';\r\nimport {Users} from './Users';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {\r\n    follow,\r\n    getUsers,\r\n    setCurrentPage,\r\n    unfollow,\r\n    UsersInitialStatePropsType\r\n} from '../../redux/users-reducer';\r\nimport {Preloader} from '../common/Preloader/Preloader';\r\n\r\n\r\nexport class UsersContainerAPI extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (page: number) => {\r\n        this.props.getUsers(page, this.props.pageSize)\r\n        this.props.setCurrentPage(page)\r\n    }\r\n\r\n    onFollow = (id: number) => {\r\n        this.props.follow(id)\r\n    }\r\n    onUnFollow = (id: number) => {\r\n        this.props.unfollow(id)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching && <Preloader/>}\r\n            <Users users={this.props.users}\r\n                   currentPage={this.props.currentPage}\r\n                   pageSize={this.props.pageSize}\r\n                   totalCount={this.props.totalCount}\r\n                   onPageChanged={this.onPageChanged}\r\n                   follow={this.onFollow}\r\n                   unfollow={this.onUnFollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    users: UsersInitialStatePropsType[]\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalCount: state.usersPage.totalCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n    }\r\n}\r\n\r\nconst connector = connect(mapStateToProps, {\r\n        setCurrentPage,\r\n    getUsers,\r\n    follow,\r\n    unfollow\r\n})\r\n\r\nexport type UsersPropsType = ConnectedProps<typeof connector>\r\n\r\nexport default connector(UsersContainerAPI)","import React from 'react';\r\nimport styles from './ProfileData.module.css'\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport defaultUserPhoto from '../../../assets/images/userPhoto.png'\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n}\r\nconst ProfileData = (props: PropsType) => {\r\n    const {profile} = props\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={styles.profileData}>\r\n            <img src={profile.photos.small ? profile.photos.small : defaultUserPhoto} alt=\"profile avatar\"/>\r\n            <div>\r\n                <h3>{profile.fullName}</h3>\r\n            </div>\r\n            {profile.aboutMe && <div>\r\n                <h3>About me:</h3>\r\n                <span>{profile.aboutMe}</span>\r\n            </div>}\r\n            <div>\r\n                <h3>My contacts:</h3>\r\n                <ProfileContacts contacts={profile.contacts}/>\r\n            </div>\r\n            {profile.lookingForAJob && <div>\r\n                <h3>Ищу работу</h3>\r\n                {profile.lookingForAJobDescription}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData;\r\n\r\ntype ProfileContactsType = {\r\n    contacts: {\r\n        'facebook': string | null\r\n        'website': string | null\r\n        'vk': string | null\r\n        'twitter': string | null\r\n        'instagram': string | null\r\n        'youtube': string | null\r\n        'github': string | null\r\n        'mainLink': string | null\r\n    }\r\n}\r\n\r\nconst ProfileContacts = (props: ProfileContactsType) => {\r\n\r\n    const netWork = Object.keys(props.contacts)\r\n    const netWorkLinks = Object.values(props.contacts)\r\n\r\n    netWork.map(key => (<div>{key}</div>))\r\n\r\n    return (\r\n        <div className={styles.wrapperContacts}>\r\n\r\n            <div className={styles.contacts}>{netWork.map(key => {\r\n                return (\r\n                    <div>\r\n                        {key}\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n\r\n            <div className={styles.contacts}>{netWorkLinks.map(value => {\r\n                return (\r\n                    <div>\r\n                        {value ? value : 'Не заполнено'}\r\n                    </div>\r\n                )\r\n            })\r\n            }</div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\nimport {PostType} from '../../../../redux/profile-reducer';\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://d13ezvd6yrslxm.cloudfront.net/wp/wp-content/images/avatar-2-story.jpg\"\r\n                 alt=\"Logo with Profile\"/>\r\n            <p>{props.message}</p>\r\n            <p>Like {props.likesCount}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import {addPostActionCreator, PostType, updateNewPostTextAC} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/store';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    newPostText: string\r\n    posts: Array<PostType>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost() {\r\n            dispatch(addPostActionCreator())\r\n        },\r\n        updateNewPostText(text: string) {\r\n            dispatch(updateNewPostTextAC(text))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React, {ChangeEvent} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\n\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    const postsElements = props.posts.map(post =>\r\n        <Post\r\n            key={post.id}\r\n            id={post.id}\r\n            message={post.message}\r\n            likesCount={post.likesCount}/>)\r\n\r\n    const onAddPost = () => {\r\n        props.addPost()\r\n    }\r\n\r\n    const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        const text = e.currentTarget.value\r\n        props.updateNewPostText(text)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Posts</h3>\r\n            <div className={s.new_post}>\r\n                <div>\r\n                    <textarea value={props.newPostText} onChange={onPostChange}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileData from './ProfileData/ProfileData';\r\nimport {MyPostsContainer} from './Posts/MyPostsContainer';\r\nimport {ProfilePropsType} from './ProfileContainer';\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            {/*<ProfileLogo />*/}\r\n            <ProfileData profile={props.profile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\nimport Profile from './Profile';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {getUserProfile, ProfileType} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n// Component own properties\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = '2'\r\n        }\r\n        this.props.getUserProfile(userId)\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props} profile={this.props.profile}/>\r\n    }\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile\r\n    }\r\n}\r\n\r\nconst WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\n\r\nconst connector = connect(mapStateToProps, {\r\n    getUserProfile\r\n})\r\nexport type ProfilePropsType = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(WithUrlDataContainerComponent);","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport s from './Header.module.css';\nimport { NavLink } from 'react-router-dom';\nimport {HeaderPropsType} from './HeaderContainer';\n\nexport const Header = (props: HeaderPropsType) => {\n  return (\n    <header className={s.header}>\n        <img src={logo} alt=\"\"/>\n\n        <div className={s.loginBlock}>\n            {props.isAuth ? props.login : <NavLink to={'/login'}>Login</NavLink> }\n\n        </div>\n    </header>\n  );\n}\n","import React from 'react';\nimport {Header} from './Header';\nimport {connect, ConnectedProps} from 'react-redux';\nimport {getAuthUserData} from '../../redux/auth-reducer';\nimport {AppStateType} from '../../redux/store';\n\nexport class HeaderContainer extends React.Component<HeaderPropsType> {\n\n    componentDidMount() {\n        this.props.getAuthUserData()\n    }\n\n    render() {\n        return (<Header {...this.props}/>);\n    }\n}\n\ntype MapStateToProps = {\n    isAuth: boolean\n    login: string | null\n}\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login,\n    }\n}\n\nconst connector = connect(mapStateToProps, {\n    getAuthUserData\n})\nexport type HeaderPropsType = ConnectedProps<typeof connector>;\n\nexport default connector(HeaderContainer);","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Route} from 'react-router-dom';\r\nimport {DialogsContainer} from './Components/Dialogs/DialogsContainer';\r\nimport {SidebarContainer} from './Components/Sidebar/SidebarContainer';\r\nimport UsersContainer from './Components/Users/UsersContainer';\r\nimport ProfileContainer from './Components/Profile/ProfileContainer';\r\nimport HeaderContainer from './Components/Header/HeaderContainer';\r\n\r\nconst App = () => {\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"app_wrapper\">\r\n                <HeaderContainer />\r\n                <SidebarContainer/>\r\n                <div className={'app_wrapper_content'}>\r\n                    <Route path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\r\n\r\n                    <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\r\n                    <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n                </div>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from './redux/store';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n\r\n    </React.StrictMode>, document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}