{"version":3,"sources":["Components/Profile/Posts/MyPosts.module.css","Components/Header/Header.module.css","Components/Profile/Profile.module.css","Components/Profile/ProfileLogo/ProfileLogo.module.css","Components/Profile/ProfileData/ProfileData.module.css","Components/Profile/Posts/Post/Post.module.css","reportWebVitals.ts","redux/profileReducer.ts","redux/dialogsReducer.ts","redux/sidebarReducer.ts","redux/redux-store.ts","Components/Header/logo.svg","Components/Header/Header.tsx","Components/Sidebar/Sidebar.tsx","Components/Profile/ProfileLogo/ProfileLogo.tsx","Components/Profile/ProfileData/ProfileData.tsx","Components/Profile/Posts/Post/Post.tsx","Components/Profile/Posts/MyPosts.tsx","Components/Profile/Posts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Dialogs/DialogItem/DialogsItem.tsx","Components/Dialogs/Messages/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx","App.tsx","index.tsx","Components/Sidebar/Sidebar.module.css","Components/Dialogs/Dialogs.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","newPostText","posts","id","message","likesCount","ADD_POST","UPDATE_NEW_POST_TEXT","newMessageBody","dialogs","name","messages","SEND_MESSAGE","UPDATE_NEW_MESSAGE_BODY","friends","rootReducer","combineReducers","profilePage","state","action","type","newPost","Date","getTime","postText","push","newText","dialogsPage","newMessage","trimmedText","trim","sidebar","store","createStore","Header","className","s","header","src","logo","alt","SidebarFriendsBlock","props","friendItem","map","friend","friendBlock","Friend","imgProfilePhoto","Sidebar","to","activeClassName","active","ProfileLogo","profile_logo","ProfileData","profileData","Post","item","MyPosts","postsElements","post","postsBlock","new_post","value","onChange","e","text","currentTarget","updateNewPostText","onClick","addPost","MyPostsContainer","getState","dispatch","Profile","profile","DialogItem","path","dialog","Message","Dialogs","dialogsElements","messagesElements","dialogsItems","placeholder","messageText","updateNewMessageBody","onSendMessage","DialogsContainer","body","App","render","rerenderEntireTree","ReactDOM","StrictMode","bind","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.c825af00.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1qs7u\",\"posts\":\"MyPosts_posts__tbkbY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2x0-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__CiwxZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile_logo\":\"ProfileLogo_profile_logo__1nkul\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileData\":\"ProfileData_profileData__3_er9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2q3Eb\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ActionsType, PostType, ProfilePostType} from './store';\r\n\r\nconst initialState: ProfilePostType = {\r\n    newPostText: '',\r\n    posts: [\r\n        {\r\n            id: 1,\r\n            message: 'Good this site',\r\n            likesCount: 10\r\n        },\r\n        {\r\n            id: 1,\r\n            message: 'Good this site',\r\n            likesCount: 10\r\n        }\r\n    ],\r\n}\r\n\r\nexport const ADD_POST = 'ADD-POST'\r\n\r\nexport const UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT'\r\n\r\nexport type AddPostActionType = ReturnType<typeof addPostActionCreator>\r\nexport type UpdateNewPostTextActionType = ReturnType<typeof updateNewPostTextAC>\r\n\r\nexport const addPostActionCreator = (postText: string) => {\r\n    return {type: ADD_POST, postText: postText} as const\r\n}\r\nexport const updateNewPostTextAC = (postText: string) => {\r\n    return {type: UPDATE_NEW_POST_TEXT, newText: postText} as const\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: ActionsType): ProfilePostType => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: action.postText,\r\n                likesCount: 0\r\n            }\r\n            state.posts.push(newPost)\r\n            state.newPostText = ''\r\n            return state\r\n        case UPDATE_NEW_POST_TEXT:\r\n            state.newPostText = action.newText;\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}","import {ActionsType, DialogsPageType, MessageType} from './store';\r\n\r\nconst initialState:DialogsPageType = {\r\n    newMessageBody: '',\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych',},\r\n        {id: 2, name: 'Nasty',},\r\n        {id: 3, name: 'Vova',},\r\n        {id: 4, name: 'Viktor',},\r\n        {id: 5, name: 'Olya',},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'Dimych'},\r\n    ]\r\n}\r\n\r\nexport const SEND_MESSAGE = 'SEND-MESSAGE'\r\nexport const UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_DIALOG_MESSAGE'\r\n\r\nexport type AddMessageActionType = ReturnType<typeof sendMessageAC>\r\nexport type UpdateNewDialogMessageActionType = ReturnType<typeof updateNewMessageBodyAC>\r\n\r\nexport const sendMessageAC = () => {\r\n    return {type: SEND_MESSAGE} as const\r\n}\r\nexport const updateNewMessageBodyAC = (messageText: string) => {\r\n    return {type: UPDATE_NEW_MESSAGE_BODY, newText: messageText} as const\r\n}\r\n\r\nexport const dialogsReducer = (state: DialogsPageType = initialState, action: ActionsType) => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            const newMessage: MessageType = {\r\n                id: new Date().getTime(),\r\n                message: state.newMessageBody,\r\n            }\r\n            const trimmedText = state.newMessageBody.trim()\r\n            if (trimmedText) {\r\n                state.messages.push(newMessage)\r\n                state.newMessageBody = ''\r\n            }\r\n            return state\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            state.newMessageBody = action.newText;\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}","import {ActionsType, SidebarType} from './store';\r\n\r\nconst initialState: SidebarType = {\r\n    friends: [\r\n        {id: 1, name: 'Dimych',},\r\n        {id: 2, name: 'Nasty',},\r\n        {id: 3, name: 'Vova',},\r\n    ]\r\n}\r\n\r\nexport const sidebarReducer = (state: SidebarType = initialState, action: ActionsType) => {\r\n\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers, createStore} from 'redux';\r\nimport {profileReducer} from './profileReducer';\r\nimport {dialogsReducer} from './dialogsReducer';\r\nimport {sidebarReducer} from './sidebarReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer\r\n})\r\n\r\nexport type RootStateReducerType = ReturnType<typeof rootReducer>\r\nexport type StoreType = typeof store\r\n\r\nexport let store = createStore(rootReducer)","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport s from './Header.module.css';\n\nfunction Header() {\n  return (\n    <header className={s.header}>\n        <img src={logo} alt=\"\"/>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './Sidebar.module.css';\nimport {FriendsType, SidebarType} from '../../redux/store';\n\nexport type PropsType = {\n    sidebar: SidebarType\n}\n\nconst Sidebar: React.FC<PropsType> = (props) => {\n    return (\n        <aside className={s.sidebar}>\n            <nav >\n                <ul>\n                    <li><NavLink to={'/profile'} activeClassName={s.active}>Profile</NavLink></li>\n                    <li><NavLink to={'/dialogs'} activeClassName={s.active}>Messages</NavLink></li>\n                    <li><NavLink to={'/news'} activeClassName={s.active}>News</NavLink></li>\n                    <li><NavLink to={'/music'} activeClassName={s.active}>Music</NavLink></li>\n                    <li><NavLink to={'/settings'} activeClassName={s.active}>Settings</NavLink></li>\n                </ul>\n            </nav>\n            <SidebarFriendsBlock friends={props.sidebar.friends}/>\n        </aside>\n    )\n}\n\nconst SidebarFriendsBlock: React.FC<SidebarType> = (props) => {\n\n    const friendItem = props.friends.map(friend => <Friend id={friend.id} name={friend.name}/>)\n\n    return (\n        <div>\n            <h3>Friends</h3>\n            <div className={s.friendBlock}>\n                {friendItem}\n            </div>\n        </div>\n    )\n}\n\nconst Friend: React.FC<FriendsType> = (props) => {\n    return (\n        <div className={s.friend}>\n            <div className={s.imgProfilePhoto}/>\n            <p className={s.name}>{props.name}</p>\n        </div>\n    )\n}\n\nexport default Sidebar;\n","import React from 'react';\nimport s from './ProfileLogo.module.css';\n\nfunction ProfileLogo() {\n    return (\n        <div className={s.profile_logo}/>\n)\n}\n\nexport default ProfileLogo;\n","import React from \"react\";\r\nimport s from \"./ProfileData.module.css\"\r\n\r\nconst ProfileData = () => {\r\n    return (\r\n        <div className={s.profileData}>\r\n            <img src=\"https://d13ezvd6yrslxm.cloudfront.net/wp/wp-content/images/avatar-2-story.jpg\" alt=\"profile avatar\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData;","import React from \"react\";\r\n\r\nimport s from \"./Post.module.css\"\r\nimport {PostType} from '../../../../redux/store';\r\n\r\n\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://d13ezvd6yrslxm.cloudfront.net/wp/wp-content/images/avatar-2-story.jpg\"\r\n                 alt=\"Logo with Profile\"/>\r\n            <p>{props.message}</p>\r\n            <p>Like {props.likesCount}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {PostType} from '../../../redux/store';\r\n\r\n\r\nexport type MyPostsPropsType = {\r\n    newPostText: string\r\n    posts: Array<PostType>\r\n    addPost: () => void\r\n    updateNewPostText: (value: string) => void\r\n}\r\n\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    const postsElements = props.posts.map(post =>\r\n        <Post id={post.id}\r\n              message={post.message}\r\n              likesCount={post.likesCount}/>)\r\n\r\n    const onAddPost = () => {\r\n        props.addPost()\r\n    }\r\n\r\n    const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        const text = e.currentTarget.value\r\n        props.updateNewPostText(text)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Posts</h3>\r\n            <div className={s.new_post}>\r\n                <div>\r\n                    <textarea value={props.newPostText} onChange={onPostChange}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {ActionsType, PostType} from '../../../redux/store';\r\nimport {addPostActionCreator, updateNewPostTextAC} from '../../../redux/profileReducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {StoreType} from '../../../redux/redux-store';\r\n\r\n\r\nexport type ProfilePostType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n    dispatch: (action: ActionsType) => void\r\n}\r\n\r\ntype MyPostsContainerPropsType = {\r\n    store: StoreType\r\n}\r\n\r\nexport const MyPostsContainer = (props: MyPostsContainerPropsType) => {\r\n\r\n    const state =  props.store.getState()\r\n\r\n    const addPost = () => {\r\n        props.store.dispatch(addPostActionCreator(state.profilePage.newPostText))\r\n    }\r\n\r\n    const onPostChange = (text: string) => {\r\n        props.store.dispatch(updateNewPostTextAC(text))\r\n\r\n    }\r\n\r\n\r\n    return <MyPosts updateNewPostText={onPostChange}\r\n                    addPost={addPost}\r\n                    posts={state.profilePage.posts}\r\n                    newPostText={state.profilePage.newPostText}\r\n    />\r\n}","import React from 'react';\nimport s from './Profile.module.css';\nimport ProfileLogo from './ProfileLogo/ProfileLogo';\nimport ProfileData from './ProfileData/ProfileData';\nimport {MyPostsContainer} from './Posts/MyPostsContainer';\nimport {StoreType} from '../../redux/redux-store';\n\nexport type PropsType = {\n    store: StoreType\n}\n\nfunction Profile(props: PropsType) {\n\n    return (\n        <div className={s.profile}>\n            <ProfileLogo />\n            <ProfileData />\n            <MyPostsContainer store={props.store}/>\n        </div>\n    );\n}\n\nexport default Profile;","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './../Dialogs.module.css';\n\ntype dialogItemType = {\n    name: string\n    id: number\n}\n\nconst DialogItem = (props: dialogItemType) => {\n    const path = `/dialogs/${props.id}`\n    return (\n        <div className={`${s.dialog}`}>\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\n        </div>)\n}\n\nexport default DialogItem;\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nexport type MessageItemType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageItemType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent} from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogsItem';\nimport Message from './Messages/Message';\nimport {DialogsPageType} from '../../redux/store';\n\ntype PropsType = {\n    updateNewMessageBody: (value: string) => void\n    onSendMessage: () => void\n    state: DialogsPageType\n}\n\nfunction Dialogs(props: PropsType) {\n\n    const state = props.state\n\n    const dialogsElements = state.dialogs.map(dialogs => <DialogItem key={dialogs.id}\n                                                                           name={dialogs.name}\n                                                                           id={dialogs.id}/>)\n\n    const messagesElements = state.messages.map(message => <Message key={message.id}\n                                                                          message={message.message}/>)\n    const newMessageBody = state.newMessageBody\n\n\n    const onSendMessageClick = () => {\n        props.onSendMessage()\n    }\n    const onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n\n        const messageText = e.currentTarget.value;\n        props.updateNewMessageBody(messageText)\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n                <div>\n                    <textarea placeholder={'Enter your message'}\n                              value={newMessageBody}\n                              onChange={onNewMessageChange}/>\n                </div>\n                <div>\n                    <button onClick={onSendMessageClick}>Send message</button>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\n\nexport default Dialogs;\n","import React from 'react';\nimport {sendMessageAC, updateNewMessageBodyAC} from '../../redux/dialogsReducer';\nimport {StoreType} from '../../redux/redux-store';\nimport Dialogs from './Dialogs';\n\ntype PropsType = {\n    store: StoreType\n}\n\nexport function DialogsContainer (props: PropsType) {\n    const state = props.store.getState().dialogsPage\n\n    const sendMessage = () => {\n        props.store.dispatch(sendMessageAC())\n    }\n\n    const updateNewMessage = (body: string) => {\n        props.store.dispatch(updateNewMessageBodyAC(body))\n    }\n\n    return <Dialogs state={state}\n        updateNewMessageBody={updateNewMessage}\n        onSendMessage={sendMessage}\n    />\n}","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header/Header';\nimport Sidebar from './Components/Sidebar/Sidebar';\nimport Profile from './Components/Profile/Profile';\nimport {HashRouter, Route} from 'react-router-dom';\nimport {ActionsType} from './redux/store';\nimport {store} from './redux/redux-store';\nimport {DialogsContainer} from './Components/Dialogs/DialogsContainer';\n\n// export type AppStateType = {\n//     store: StoreType\n//     addPost: () => void\n//     addMessage: () => void\n//     updateNewPostText: (newText: string) => void\n//     updateNewDialogMessage: (newText: string) => void\n// }\n\ntype PropsType = {\n    store: typeof store\n    dispatch: (action: ActionsType) => void\n}\n\nconst App: React.FC<PropsType> = (props) => {\n\n    const state = props.store.getState()\n\n    return (\n        <HashRouter>\n            <div className=\"app_wrapper\">\n                <Header/>\n                <Sidebar sidebar={state.sidebar}/>\n                <div className={'app_wrapper_content'}>\n                    <Route path='/profile' render={() => <Profile store={props.store}/>}/>\n\n                    <Route path='/dialogs' render={() => <DialogsContainer store={props.store}/>}/>\n                </div>\n            </div>\n        </HashRouter>\n    );\n}\n\nexport default App;","import React from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from './redux/redux-store';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nexport const rerenderEntireTree = () => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App store={store} dispatch={store.dispatch.bind(store)}\n            />\n        </React.StrictMode>, document.getElementById('root')\n    )\n}\n\nrerenderEntireTree()\n\nstore.subscribe(() => {\n    rerenderEntireTree()\n})\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__13B6p\",\"active\":\"Sidebar_active__2WsD6\",\"friendBlock\":\"Sidebar_friendBlock__2oXRU\",\"friend\":\"Sidebar_friend__3Y_SH\",\"name\":\"Sidebar_name__2Hl5y\",\"imgProfilePhoto\":\"Sidebar_imgProfilePhoto__1UA-e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__BRHD6\",\"dialogsItems\":\"Dialogs_dialogsItems__1aH1f\",\"dialog\":\"Dialogs_dialog__1glHE\",\"active\":\"Dialogs_active__3NWs5\",\"messanges\":\"Dialogs_messanges__WVkjx\"};"],"sourceRoot":""}